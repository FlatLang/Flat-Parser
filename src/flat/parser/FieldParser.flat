package flat/parser

import flat/ast/FieldNode
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

import flat/ast/Node

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    FieldScopeParser(),
    AssignmentParser(),
    ArrowExpressionParser()
  ])

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_type"),
    CaptureTokenPattern(
      label: "generic_parameters",
      start: Token(value: "<"),
      end: Token(value: ">"),
      optional: true
    ),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "[", label: "bracket_start"),
      SingleTokenPattern(Token.Type.SYMBOL, "]", label: "bracket_end")
    ], repeat: true, optional: true),
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_name")
  ])

  override public checkStatementContinuation(ParseContext context, Token token) => token.type == Token.Type.SYMBOL

  override public generateNode(ParseContext context, TokenMatch match) -> FieldNode {
    let type = match.getValue("declaration_type")
    let name = match.getValue("declaration_name")
    let bracketCount = match.getValues("bracket_start").count

    return FieldNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount
    )
  }
}