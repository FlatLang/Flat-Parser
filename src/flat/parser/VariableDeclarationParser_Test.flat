package flat/parser

import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/VariableDeclarationNode
import flat/io/File

testable class {
  async test `can parse declaration`() {
    let parser = VariableDeclarationParser()

    let request = ParseRequest(
      parent: FileNode(file: File("test.flat")),
      sourceCode: "String test"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true, result.errorMessage)

    let expected = VariableDeclarationNode(
      name: "test",
      type: "String"
    )

    expect(result.node).toBe(expected)
  }

  async test `fails parse on too many words`() {
    let parser = VariableDeclarationParser()

    let request = ParseRequest(
      parent: FileNode(file: File("test.flat")),
      sourceCode: "let String test"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(false)
    expect(result.errorMessage).toBe("Variable declaration contains extraneous words: \"let\"")
  }

  async test `fails parse on too few words`() {
    let parser = VariableDeclarationParser()

    let request = ParseRequest(
      parent: FileNode(file: File("test.flat")),
      sourceCode: "test"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(false)
    expect(result.errorMessage).toBe("Variable declaration missing type or name value")
  }
  async test `can parse declaration with array type`() {
    let parser = VariableDeclarationParser()

    let request = ParseRequest(
      parent: FileNode(file: File("test.flat")),
      sourceCode: "String[] test"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true, result.errorMessage)

    let expected = VariableDeclarationNode(
      name: "test",
      type: "String",
      arrayBrackets: "[]"
    )

    expect(result.node).toBe(expected)
  }
}
