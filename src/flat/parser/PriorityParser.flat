package flat/parser

import flat/ast/PriorityNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
  let static Logger log = Logger(PriorityParser.class)

  override ParserBase[] childParsers => Array()
    :addAll(FunctionScopeParser().childParsers)
    :add(BinaryOperationParser())

  override lazy TokenPattern pattern => GroupTokenPattern([
    CaptureTokenPattern(
      label: "value",
      start: Token(value: "("),
      end: Token(value: ")")
    )
  ])

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public generateNode(ParseContext context, TokenMatch match) -> PriorityNode {
    return PriorityNode()
  }

  override public getChildParseRequests(ParseContext context, TokenMatch match) -> ParseRequest {
    Token[][] tokens = match
      .getMatches<CaptureTokenMatch>("value")
      .map({ _.capture })

    return ParseRequest(
      requests: tokens.map({
        return ParseRequestData(
          tokens: _,
          parsers: childParsers
        )
      })
    )
  }
}