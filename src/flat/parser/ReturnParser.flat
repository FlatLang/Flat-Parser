package flat/parser

import flat/ast/ReturnNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
  let static Logger log = Logger(ReturnParser.class)

  override ParserBase[] childParsers => Array()
    :addAll(FunctionScopeParser().childParsers)

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, "return")
  ])

  override public acceptImmediately() => true

  override public generateNode(ParseContext context, TokenMatch match) -> ReturnNode {
    return ReturnNode()
  }
}