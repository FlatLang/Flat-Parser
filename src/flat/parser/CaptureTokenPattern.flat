package flat/parser

import flat/datastruct/HashMap
import flat/compiler/models/Token
import flat/log/Logger

data class extends TokenPattern {
  let static Logger log = Logger(CaptureTokenPattern.class)

  visible Token start
  visible Token end
  visible Bool includeEndToken = true

  override public getMatcher() => CaptureTokenMatcher(this)

  public toPatternString() -> String {
    var str = ""

    if (label) {
      str += "#{label}:"
    }

    str += "capture("

    if (start) {
      str += "start:\"#{start.value}\" "
    }
    if (end) {
      str += "end:"

      if (!includeEndToken) {
        str += "~"
      }

      str += "\"#{end.value}\" "
    }
    if (minimumTokenCount) {
      str += "min:#{minimumTokenCount} "
    }

    str = str.trimEnd()

    str += ")#{getModifiersString()}"

    return str
  }
}