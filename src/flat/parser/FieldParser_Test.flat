package flat/parser

import flat/datastruct/HashMap
import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/FieldNode
import flat/compiler/models/Token
import flat/io/File

testable class {
  async test `can parse declaration`() {
    let parser = FieldParser()

    let match = TokenMatch(
      HashMap()
        :add("declaration_type", Array<String>():add("String"))
        :add("declaration_name", Array<String>():add("test"))
    )

    let result = parser.generateNode(null, match)

    let expected = FieldNode(
      type: "String",
      name: "test"
    )

    expect(result).toBe(expected)
  }

  async test `can parse declaration with array type`() {
    let parser = FieldParser()

    let match = TokenMatch(
      HashMap()
        :add("declaration_type", Array<String>():add("String"))
        :add("declaration_name", Array<String>():add("test"))
        :add("bracket_start", Array<String>():add("["))
        :add("bracket_end", Array<String>():add("]"))
    )

    let result = parser.generateNode(null, match)

    let expected = FieldNode(
      type: "String",
      name: "test",
      arrayDimensions: 1
    )

    expect(result).toBe(expected)
  }
}
