package flat/parser

import flat/datastruct/HashMap
import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/FieldNode
import flat/compiler/models/Token
import flat/io/File

testable class {
  async test `can parse declaration`() {
    let parser = FieldParser()

    let match = GroupTokenMatch(tokenMatches: [
      SingleTokenMatch(
        tokens: [Token(value: "String", type: Token.Type.IDENTIFIER)],
        label: "declaration_type"
      ),
      SingleTokenMatch(
        tokens: [Token(value: "test", type: Token.Type.IDENTIFIER)],
        label: "declaration_name"
      )
    ])

    let result = parser.generateNode(null, match)

    let expected = FieldNode(
      type: "String",
      name: "test"
    )

    expect(result).toBe(expected)
  }

  async test `can parse declaration with array type`() {
    let parser = FieldParser()

    let match = GroupTokenMatch(tokenMatches: [
      SingleTokenMatch(
        tokens: [Token(value: "String", type: Token.Type.IDENTIFIER)],
        label: "declaration_type"
      ),
      SingleTokenMatch(
        tokens: [Token(value: "test", type: Token.Type.IDENTIFIER)],
        label: "declaration_name"
      ),
      SingleTokenMatch(
        tokens: [Token(value: "[", type: Token.Type.SYMBOL)],
        label: "bracket_start"
      ),
      SingleTokenMatch(
        tokens: [Token(value: "]", type: Token.Type.SYMBOL)],
        label: "bracket_end"
      )
    ])

    let result = parser.generateNode(null, match)

    let expected = FieldNode(
      type: "String",
      name: "test",
      arrayDimensions: 1
    )

    expect(result).toBe(expected)
  }
}
