package flat/parser

import flat/ast/FileNode
import flat/ast/AnnotationNode
import flat/annotations/PublicModifier
import flat/annotations/LetModifier
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can parse a basic array access`() {
    let parser = ArrayAccessParser()
    let matcher = parser.matcher
    let result = matcher.matchAll([
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "]", type: Token.Type.SYMBOL)
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "]", type: Token.Type.SYMBOL)
    ])

    expect(result?.getMatch<NodeTokenMatch>("index")?.tokens).toBe([
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ])
    expect(matcher.partial).toBe(false)
  }

  test `can parse a basic array access with integer index`() {
    let parser = ArrayAccessParser()
    let matcher = parser.matcher
    let result = matcher.matchAll([
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "1", type: Token.Type.INTEGER),
      Token(value: "]", type: Token.Type.SYMBOL)
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "1", type: Token.Type.INTEGER),
      Token(value: "]", type: Token.Type.SYMBOL)
    ])

    expect(result?.getMatch<NodeTokenMatch>("index")?.tokens).toBe([
      Token(value: "1", type: Token.Type.INTEGER)
    ])
    expect(matcher.partial).toBe(false)
  }

  test `can get child node matches`() {
    let parser = ArrayAccessParser()
    let matcher = parser.matcher
    let result = matcher.matchAll([
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "1", type: Token.Type.INTEGER),
      Token(value: "]", type: Token.Type.SYMBOL)
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "1", type: Token.Type.INTEGER),
      Token(value: "]", type: Token.Type.SYMBOL)
    ])

    let childMatches = parser.getChildNodeTokenMatches(ParseContext(), result)

    expect(childMatches.count).toBe(1)
    expect(childMatches.first.tokens).toBe([
      Token(value: "1", type: Token.Type.INTEGER)
    ])
  }
}
