package flat/parser

import novex/nest/TestResult

import flat/time/Timer
import flat/io/FancyOutputStream
import flat/parser/Parser

[TestSuite [
  Parser_Test,
  ParseEngine_Test,
  SingleTokenMatcher_Test,
  GroupTokenMatcher_Test,
  CaptureTokenMatcher_Test,
  NodeTokenMatcher_Test,
  PreconditionTokenMatcher_Test,
  XorTokenMatcher_Test,
  PackageParser_Test,
  ImportParser_Test,
  VariableDeclarationParser_Test,
  FieldParser_Test,
  ClassParser_Test,
  ModifierParser_Test,
  AnnotationParser_Test,
  FunctionParser_Test,
  CommentParser_Test,
  ClassScopeParser_Test,
  ParameterParser_Test,
  FunctionCallParser_Test,
  ArrayAccessParser_Test,
  ArrayInstantiationParser_Test,
  LocalDeclarationParser_Test,
  MatchParser_Test,
  MatchCaseParser_Test,
  IfParser_Test
]]
class {
  public static async main(String args[]) {
    let test = Parser_TestSuite()

    let results = new TestResult[]

    Timer timer = Timer().start()

    test.runTests({
      results.add(_)
    })

    timer.stop()

    let fancy = FancyOutputStream(headerPattern: "/\\")

    let unsuccessful = results.filter({ !_.success })

    if (unsuccessful.count > 0) {
      fancy.writeHeader(
        "#unsuccessful.count Failure#{unsuccessful.count == 1 ? "" : "s"} out of #results.count test#{results.count == 1 ? "" : "s"}",
        pattern: ":'( ",
        symmetrical: true
      )

      if (unsuccessful.count > 1 || results.last.success) {
        unsuccessful.forEach({
          Console.log("#_")
        })
      }
    } else {
      fancy.writeHeader(
        "All #results.count Successful",
        pattern: ":) ",
        symmetrical: true
      )
    }


    Console.writeLine("Took #{timer.duration}ms")

    if (unsuccessful.count > 0) {
        System.exit(1)
    }
  }
}
