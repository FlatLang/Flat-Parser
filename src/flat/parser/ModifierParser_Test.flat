package flat/parser

import flat/parser/Parser
import flat/annotations/VisibleModifier
import flat/annotations/PublicModifier
import flat/annotations/PrivateModifier
import flat/annotations/LetModifier
import flat/annotations/VarModifier
import flat/ast/FileNode
import flat/ast/ClassNode
import flat/ast/FieldNode
import flat/ast/Node
import flat/io/File

testable class {
  async test `can parse visible modifier`() {
    let parser = ModifierParser()
    let fileNode = FileNode(file: File("test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode,
      sourceCode: "[Visible]"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = VisibleModifier(aliasUsed: null)

    expect(result.node).toBe(expected)
  }

  async test `can parse visible modifier by alias`() {
    let parser = ModifierParser()
    let fileNode = FileNode(file: File("test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode,
      sourceCode: "visible"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = VisibleModifier(aliasUsed: "visible")

    expect(result.node).toBe(expected)
  }

  async test `can parse private modifier`() {
    let parser = ModifierParser()
    let fileNode = FileNode(file: File("test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode,
      sourceCode: "[Private]"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = PrivateModifier(aliasUsed: null)

    expect(result.node).toBe(expected)
  }

  async test `can parse private modifier by alias`() {
    let parser = ModifierParser()
    let fileNode = FileNode(file: File("test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode,
      sourceCode: "private"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = PrivateModifier(aliasUsed: "private")

    expect(result.node).toBe(expected)
  }

  async test `can parse public modifier`() {
    let parser = ModifierParser()
    let fileNode = FileNode(file: File("test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode,
      sourceCode: "[Public]"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = PublicModifier()

    expect(result.node).toBe(expected)
  }

  async test `can parse public modifier by alias`() {
    let parser = ModifierParser()
    let fileNode = FileNode(file: File("test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode,
      sourceCode: "public"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = PublicModifier(aliasUsed: "public")

    expect(result.node).toBe(expected)
  }

  async test `can parse let modifier by alias`() {
    let parser = ModifierParser()
    let fileNode = FileNode(file: File("test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode,
      sourceCode: "let"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = LetModifier(aliasUsed: "let")

    expect(result.node).toBe(expected)
  }

  async test `can parse var modifier by alias`() {
    let parser = ModifierParser()
    let fileNode = FileNode(file: File("test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode,
      sourceCode: "var"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = VarModifier(aliasUsed: "var")

    expect(result.node).toBe(expected)
  }
}
