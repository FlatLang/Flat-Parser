package flat/parser

import flat/parser/Parser
import flat/annotations/VisibleModifier
import flat/annotations/PublicModifier
import flat/annotations/PrivateModifier
import flat/annotations/LetModifier
import flat/annotations/VarModifier
import flat/ast/FileNode
import flat/ast/ClassNode
import flat/ast/FieldNode
import flat/ast/Node
import flat/io/File

testable class {
  async test `can parse visible modifier`() {
    let parser = ModifierParser()
    let fileNode = FileNode(File("Test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode
    )

    let result = parser.parse("[Visible]", request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = VisibleModifier.Builder(
      parent: request.parent,
      aliasUsed: null
    ).build()

    expect(result.node).toBe(expected)
  }

  async test `can parse visible modifier by alias`() {
    let parser = ModifierParser()
    let fileNode = FileNode(File("Test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode
    )

    let result = parser.parse("visible", request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = VisibleModifier.Builder(
      parent: request.parent,
      aliasUsed: "visible"
    ).build()

    expect(result.node).toBe(expected)
  }

  async test `can parse private modifier`() {
    let parser = ModifierParser()
    let fileNode = FileNode(File("Test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode
    )

    let result = parser.parse("[Private]", request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = PrivateModifier.Builder(
      parent: request.parent,
      aliasUsed: null
    ).build()

    expect(result.node).toBe(expected)
  }

  async test `can parse private modifier by alias`() {
    let parser = ModifierParser()
    let fileNode = FileNode(File("Test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode
    )

    let result = parser.parse("private", request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = PrivateModifier.Builder(
      parent: request.parent,
      aliasUsed: "private"
    ).build()

    expect(result.node).toBe(expected)
  }

  async test `can parse public modifier`() {
    let parser = ModifierParser()
    let fileNode = FileNode(File("Test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode
    )

    let result = parser.parse("[Public]", request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = PublicModifier.Builder(
      parent: request.parent
    ).build()

    expect(result.node).toBe(expected)
  }

  async test `can parse public modifier by alias`() {
    let parser = ModifierParser()
    let fileNode = FileNode(File("Test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode
    )

    let result = parser.parse("public", request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = PublicModifier.Builder(
      parent: request.parent,
      aliasUsed: "public"
    ).build()

    expect(result.node).toBe(expected)
  }

  async test `can parse let modifier by alias`() {
    let parser = ModifierParser()
    let fileNode = FileNode(File("Test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode
    )

    let result = parser.parse("let", request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = LetModifier.Builder(
      parent: request.parent,
      aliasUsed: "let"
    ).build()

    expect(result.node).toBe(expected)
  }

  async test `can parse var modifier by alias`() {
    let parser = ModifierParser()
    let fileNode = FileNode(File("Test.flat"))
    let classNode = ClassNode(name: "Test", implicitName: false)
    let fieldNode = FieldNode(name: "test", type: "Type")

    let request = ParseRequest(
      parent: fieldNode
    )

    let result = parser.parse("var", request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = VarModifier.Builder(
      parent: request.parent,
      aliasUsed: "var"
    ).build()

    expect(result.node).toBe(expected)
  }
}
