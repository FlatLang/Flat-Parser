package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/AnnotationNode
import flat/compiler/models/Token
import flat/log

import flat/extensions/SyntaxStringFunctions

data class extends ParserBase {
  static Logger log = Logger(AnnotationParser.class)

  override lazy TokenPattern pattern => NodeTokenPattern([
    ModifierParser(),
    TargetAnnotationParser(),
    TargetRuntimeAnnotationParser(),
    TestSuiteAnnotationParser(),
  ], exact: true, metadata: true, label: "annotation")

  override public traverseNodes(func(Node, ParseContext, TokenPattern)) {
    if (let annotationMatch = lastMatch.getMatch<NodeTokenMatch>("annotation")) {
      log.traceFunc({"Generating node for annotation match: #{annotationMatch}"})
      annotationMatch.traverseNodes(func)
    }
  }
}