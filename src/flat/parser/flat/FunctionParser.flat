package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FunctionNode
import flat/compiler/models/Token
import flat/compiler/models/SyntaxTokenFunctions
import flat/log/Logger

data class extends ParserBase {
  static Logger log = Logger(FunctionParser.class)

  override lazy TokenPattern pattern => GroupTokenPattern([
    IdentifierParser().pattern,
    NodeTokenPattern([GenericParametersParser()], optional: true),
    SingleTokenPattern(type: Token.Type.SYMBOL, value: "("),
    GroupTokenPattern([
      NodeTokenPattern(parameterParsers, baseParser: true, label: "parameter"),
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.SYMBOL, value: ","),
        NodeTokenPattern(parameterParsers, baseParser: true, label: "parameter")
      ], optional: true, repeat: true),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: ",", optional: true),
    ], optional: true, label: "function_parameters"),
    SingleTokenPattern(type: Token.Type.SYMBOL, value: ")"),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "->"),
      NodeTokenPattern([TypeParser()]),
    ], optional: true, label: "function_type"),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "=>"),
      NodeTokenPattern(arrowExpressionValues, baseParser: true, label: "function_arrow_expression")
    ], optional: true),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "{"),
      NodeGroupTokenPattern(LocalScopeParser().valueParsers, optional: true, label: "function_body_scope"),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "}")
    ], optional: true)
  ], label: "function")

  let ParserBase[] parameterParsers => [
    ThisModifierParser(),
    AnnotationParser(),
    ParameterParser(),
    FunctionParameterParser()
  ]

  visible ParserBase[] arrowExpressionValues => [
    AnnotationParser(),
    ThrowParser(),
    IfParser(),
    TryParser(),
    CatchParser(),
    ElseParser(),
    ExternalParser(),
    ReturnParser(),
    LiteralParser(),
    RegexPatternParser(),
    MatchParser(),
    SwitchParser(),
    WhileLoopParser(),
    ForLoopParser(),
    ForEachLoopParser(),
    FallthroughParser(),
    ContinueParser(),
    BreakParser(),
    LocalDeclarationParser(),
    FunctionCallParser(),
    IdentifierParser(),
    ArrayInstantiationParser(),
    ArrayInitializerParser(),
    UnaryOperationParser(),
    CastParser(),
    PriorityParser(),
    LambdaParser()
  ]

  override public generateNode() -> FunctionNode {
    let type = lastMatch.getValue("type_name")
    let name = lastMatch.getValue("name")
    let bracketCount = lastMatch.getValues("bracket_start").count

    return FunctionNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount
    )
  }

  override public getChildNodeTokenMatches() => NodeTokenMatch[] {
    let matches = NodeTokenMatch[]

    if (let params = lastMatch.getMatch<GroupTokenMatch>("function_parameters")) {
      matches.addAll(params.tokenMatches.filter({ _.label == "parameter" }))
    }
    if (let arrowExpression = lastMatch.getMatch<NodeTokenMatch>("function_arrow_expression")) {
      matches.add(arrowExpression)
    }
    if (let scope = lastMatch.getMatch<NodeGroupTokenMatch>("function_body_scope")) {
      matches.addAll(scope.getChildNodeMatches())
    }

    return matches
  }
}