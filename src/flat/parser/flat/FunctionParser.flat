package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/compiler/models/Token
import flat/compiler/models/SyntaxTokenFunctions
import flat/log/Logger

data class extends ParserBase {
  static Logger log = Logger(FunctionParser.class)

  override lazy TokenPattern pattern => GroupTokenPattern<FunctionNode>([
    SingleTokenPattern<IdentifierNode>(type: Token.Type.IDENTIFIER, label: "name", field: "name"),
    NodeTokenPattern([GenericParametersParser()], optional: true),
    SingleTokenPattern(type: Token.Type.SYMBOL, value: "("),
    GroupTokenPattern<ParametersNode>([
      NodeTokenPattern(parameterParsers, baseParser: true, label: "parameter"),
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.SYMBOL, value: ","),
        NodeTokenPattern(parameterParsers, baseParser: true, label: "parameter")
      ], optional: true, repeat: true),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: ",", optional: true),
    ], optional: true, label: "function_parameters"),
    SingleTokenPattern(type: Token.Type.SYMBOL, value: ")"),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "->"),
      NodeTokenPattern([TypeParser()]),
    ], optional: true, label: "function_type"),
    NodeTokenPattern([ArrowExpressionParser()], baseParser: true, optional: true),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "{"),
      NodeGroupTokenPattern(LocalScopeParser().valueParsers, optional: true, label: "function_body_scope"),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "}")
    ], optional: true)
  ], label: "function")

  let ParserBase[] parameterParsers => [
    ThisModifierParser(),
    AnnotationParser(),
    ParameterParser(),
    FunctionParameterParser()
  ]

  visible ParserBase[] arrowExpressionValues => [
    AnnotationParser(),
    ThrowParser(),
    IfParser(),
    TryParser(),
    CatchParser(),
    ElseParser(),
    ExternalParser(),
    ReturnParser(),
    LiteralParser(),
    RegexPatternParser(),
    MatchParser(),
    SwitchParser(),
    WhileLoopParser(),
    ForLoopParser(),
    ForEachLoopParser(),
    FallthroughParser(),
    ContinueParser(),
    BreakParser(),
    LocalDeclarationParser(),
    FunctionCallParser(),
    IdentifierParser(),
    ArrayInstantiationParser(),
    ArrayInitializerParser(),
    UnaryOperationParser(),
    CastParser(),
    PriorityParser(),
    LambdaParser()
  ]
}