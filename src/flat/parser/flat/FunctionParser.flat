package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FunctionNode
import flat/compiler/models/Token
import flat/compiler/models/SyntaxTokenFunctions
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(FunctionParser.class)

  override ParserBase[] childParsers => Array()
    :addAll(LocalScopeParser().childParsers)

  override public checkStatementContinuation(ParseContext context, Token token) => true
  override public beginsScope() => true

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "name"),
    CaptureTokenPattern(
      label: "generic_parameters",
      start: Token(value: "<"),
      end: Token(value: ">"),
      allowedTokens: [
        Token(type: Token.Type.IDENTIFIER),
        Token(type: Token.Type.SYMBOL, value: "<"),
        Token(type: Token.Type.SYMBOL, value: ">"),
        Token(type: Token.Type.SYMBOL, value: "["),
        Token(type: Token.Type.SYMBOL, value: "]"),
        Token(type: Token.Type.SYMBOL, value: ",")
      ],
      optional: true
    ),
    SingleTokenPattern(Token.Type.SYMBOL, "("),
    GroupTokenPattern([
      NodeTokenPattern(parameterParsers, label: "parameter"),
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, ","),
        NodeTokenPattern(parameterParsers, label: "parameter")
      ], optional: true, repeat: true)
    ], optional: true, label: "parameters"),
    SingleTokenPattern(Token.Type.SYMBOL, ")"),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "->"),
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "type"),
      CaptureTokenPattern(
        label: "generic_parameters",
        start: Token(value: "<"),
        end: Token(value: ">"),
        allowedTokens: [
          Token(type: Token.Type.IDENTIFIER),
          Token(type: Token.Type.SYMBOL, value: "<"),
          Token(type: Token.Type.SYMBOL, value: ">"),
          Token(type: Token.Type.SYMBOL, value: "["),
          Token(type: Token.Type.SYMBOL, value: "]"),
          Token(type: Token.Type.SYMBOL, value: ",")
        ],
        optional: true
      ),
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, "[", label: "type_bracket_start"),
        SingleTokenPattern(Token.Type.SYMBOL, "]", label: "type_bracket_end")
      ], repeat: true, optional: true)
    ], optional: true),
    SingleTokenPattern(Token.Type.SYMBOL, "=>", optional: true)
  ])

  let ParserBase[] parameterParsers => [
    AnnotationParser(),
    ParameterParser(),
    FunctionParameterParser()
  ]

  override public generateNode(ParseContext context, TokenMatch match) -> FunctionNode {
    let type = match.getValue("type")
    let name = match.getValue("name")
    let bracketCount = match.getValues("bracket_start").count

    return FunctionNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount
    )
  }

  override public getChildNodeTokenMatches(ParseContext context, TokenMatch match) => NodeTokenMatch[] {
    if (let params = match.getMatch<GroupTokenMatch>("parameters")) {
      return (NodeTokenMatch[])params.tokenMatches.filter({ _.label == "parameter" })
    }
  }
}