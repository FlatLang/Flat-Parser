package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FunctionNode
import flat/compiler/models/Token
import flat/compiler/models/SyntaxTokenFunctions
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(FunctionParser.class)

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "name"),
    CaptureTokenPattern(
      label: "generic_parameters",
      start: Token(value: "<"),
      end: Token(value: ">"),
      allowedTokens: [
        Token(type: Token.Type.IDENTIFIER),
        Token(type: Token.Type.SYMBOL, value: "<"),
        Token(type: Token.Type.SYMBOL, value: ">"),
        Token(type: Token.Type.SYMBOL, value: "["),
        Token(type: Token.Type.SYMBOL, value: "]"),
        Token(type: Token.Type.SYMBOL, value: ",")
      ],
      optional: true
    ),
    SingleTokenPattern(Token.Type.SYMBOL, "("),
    GroupTokenPattern([
      NodeTokenPattern(parameterParsers, label: "parameter"),
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, ","),
        NodeTokenPattern(parameterParsers, label: "parameter")
      ], optional: true, repeat: true)
    ], optional: true, label: "function_parameters"),
    SingleTokenPattern(Token.Type.SYMBOL, ")"),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "->"),
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "type"),
      CaptureTokenPattern(
        label: "generic_parameters",
        start: Token(value: "<"),
        end: Token(value: ">"),
        allowedTokens: [
          Token(type: Token.Type.IDENTIFIER),
          Token(type: Token.Type.SYMBOL, value: "<"),
          Token(type: Token.Type.SYMBOL, value: ">"),
          Token(type: Token.Type.SYMBOL, value: "["),
          Token(type: Token.Type.SYMBOL, value: "]"),
          Token(type: Token.Type.SYMBOL, value: ",")
        ],
        optional: true
      ),
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, "[", label: "type_bracket_start"),
        SingleTokenPattern(Token.Type.SYMBOL, "]", label: "type_bracket_end")
      ], repeat: true, optional: true)
    ], optional: true),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "=>"),
      NodeTokenPattern(LocalScopeParser().valueParsers, label: "function_arrow_expression")
    ], optional: true),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "{"),
      NodeGroupTokenPattern(LocalScopeParser().valueParsers, optional: true, label: "function_body_scope"),
      SingleTokenPattern(Token.Type.SYMBOL, "}")
    ], optional: true)
  ])

  let ParserBase[] parameterParsers => [
    AnnotationParser(),
    ParameterParser(),
    FunctionParameterParser()
  ]

  override public generateNode() -> FunctionNode {
    let type = lastMatch.getValue("type")
    let name = lastMatch.getValue("name")
    let bracketCount = lastMatch.getValues("bracket_start").count

    return FunctionNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount
    )
  }

  override public getChildNodeTokenMatches() => NodeTokenMatch[] {
    let matches = NodeTokenMatch[]

    if (let params = lastMatch.getMatch<GroupTokenMatch>("function_parameters")) {
      matches.addAll(params.tokenMatches.filter({ _.label == "parameter" }))
    }
    if (let arrowExpression = lastMatch.getMatch<NodeTokenMatch>("function_arrow_expression")) {
      matches.add(arrowExpression)
    }
    if (let scope = lastMatch.getMatch<NodeGroupTokenMatch>("function_body_scope")) {
      matches.addAll(scope.getChildNodeMatches())
    }

    return matches
  }
}