package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/PackageNode
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

data class extends ParserBase {
  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, "package"),
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "package_location_component"),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "/", label: "package_location_component"),
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "package_location_component")
    ], repeat: true, optional: true)
  ])

  override public generateNode(ParseContext context, TokenMatch match = lastMatch) -> PackageNode {
    let components = match.getValues("package_location_component")

    return PackageNode(
      location: components.join()
    )
  }
}