package flat/parser/flat

import flat/ast
import flat/parser
import flat/parser/matchers
import flat/compiler/models

data class extends ParserBase {
  override lazy TokenPattern pattern => XorTokenPattern<LambdaNode>([
    XorTokenPattern([
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "("),
        GroupTokenPattern<ParametersNode>([
          XorTokenPattern([
            GroupTokenPattern([
              NodeTokenPattern([TypeParser()]),
              NodeTokenPattern([IdentifierParser()]),
            ]),
            NodeTokenPattern([IdentifierParser()]),
          ]),
          GroupTokenPattern([
            SingleTokenPattern(type: Token.Type.SYMBOL, value: ","),
            XorTokenPattern([
              GroupTokenPattern([
                NodeTokenPattern([TypeParser()]),
                NodeTokenPattern([IdentifierParser()]),
              ]),
              NodeTokenPattern([IdentifierParser()]),
            ]),
          ], optional: true, repeat: true),
          SingleTokenPattern(type: Token.Type.SYMBOL, value: ",", optional: true),
        ], optional: true),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: ")"),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "=>"),
        NodeTokenPattern(LocalScopeParser().valueParsers, baseParser: true),
      ]),
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.IDENTIFIER),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "=>"),
        NodeTokenPattern(LocalScopeParser().valueParsers, baseParser: true),
      ])
    ]),
    NodeTokenPattern([LocalScopeParser()], baseParser: true),
  ])
}