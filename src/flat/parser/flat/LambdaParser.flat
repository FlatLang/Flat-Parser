package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/LambdaNode
import flat/compiler/models/Token

data class extends ParserBase implements ScopeableParser {
  override lazy TokenPattern pattern => XorTokenPattern([
    XorTokenPattern([
      GroupTokenPattern([
        CaptureTokenPattern(
          label: "parameters",
          start: Token(value: "("),
          end: Token(value: ")")
        ),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "=>"),
        NodeTokenPattern(LocalScopeParser().valueParsers, label: "lambda_contents"),
      ]),
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "param_name"),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "=>"),
        NodeTokenPattern(LocalScopeParser().valueParsers, label: "lambda_contents"),
      ])
    ]),
    NodeTokenPattern([LocalScopeParser()], label: "lambda_contents"),
  ])

  override public generateNode() -> LambdaNode {
    return LambdaNode()
  }

  override public getChildNodeTokenMatches() => NodeTokenMatch[] {
    if (let contents = lastMatch.getMatch<NodeTokenMatch>("lambda_contents")) {
      return [contents]
    }
  }
}