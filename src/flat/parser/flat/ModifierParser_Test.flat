package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/datastruct/HashMap
import flat/parser/Parser
import flat/annotations/VisibleModifier
import flat/annotations/PublicModifier
import flat/annotations/PrivateModifier
import flat/annotations/LetModifier
import flat/annotations/VarModifier
import flat/ast/FileNode
import flat/ast/ClassNode
import flat/ast/FieldNode
import flat/ast/Node
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can parse visible modifier`() {
    let parser = ModifierParser()

    let match = GroupTokenMatch(tokenMatches: [
      SingleTokenMatch(
        tokens: [Token(value: "visible", type: Token.Type.IDENTIFIER)],
        label: "alias"
      )
    ])

    let result = parser.generateNode(null, match)

    let expected = VisibleModifier(
      aliasUsed: "visible"
    )

    expect(result).toBe(expected)
  }
}
