package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/LiteralNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    DotAccessParser(),
    ColonAccessParser(),
    BinaryOperationParser(),
    TernaryParser(),
    MatchCaseParser()
  ])

  override lazy TokenPattern pattern => XorTokenPattern([
    SingleTokenPattern(Token.Type.STRING),
    SingleTokenPattern(Token.Type.CHAR),
    SingleTokenPattern(Token.Type.INTEGER),
    SingleTokenPattern(Token.Type.BOOL),
    SingleTokenPattern(Token.Type.NULL)
  ])

  override public acceptImmediately() => true

  override public generateNode() -> LiteralNode {
    let token = lastMatch.tokens.first

    var Int literalType

    match token.type {
      Token.Type.STRING => literalType = LiteralNode.Type.STRING
      Token.Type.CHAR => literalType = LiteralNode.Type.CHAR
      Token.Type.INTEGER => literalType = LiteralNode.Type.INTEGER
      Token.Type.BOOL => literalType = LiteralNode.Type.BOOL
      Token.Type.NULL => literalType = LiteralNode.Type.NULL
    }

    return LiteralNode(
      value: token.value,
      literalType: literalType
    )
  }
}