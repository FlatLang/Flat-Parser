package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FieldNode
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

import flat/ast/Node

data class extends ParserBase implements ScopeableParser {
  override ParserBase[] childParsers => Array():addAll([
    FieldScopeParser(),
    AssignmentParser(),
    ArrowExpressionParser(),
    DoubleArrowExpressionParser()
  ])

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_type"),
    CaptureTokenPattern(
      label: "generic_parameters",
      start: Token(value: "<"),
      end: Token(value: ">"),
      allowedTokens: [
        Token(type: Token.Type.IDENTIFIER),
        Token(type: Token.Type.SYMBOL, value: "<"),
        Token(type: Token.Type.SYMBOL, value: ">"),
        Token(type: Token.Type.SYMBOL, value: "["),
        Token(type: Token.Type.SYMBOL, value: "]"),
        Token(type: Token.Type.SYMBOL, value: ",")
      ],
      optional: true
    ),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "[", label: "bracket_start"),
      SingleTokenPattern(Token.Type.SYMBOL, "]", label: "bracket_end")
    ], repeat: true, optional: true),
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_name"),
    GroupTokenPattern([
      XorTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, "=>"),
        SingleTokenPattern(Token.Type.SYMBOL, "<=>")
      ]),
      NodeTokenPattern(LocalScopeParser().valueParsers)
    ], optional: true),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "{"),
      NodeGroupTokenPattern(fieldScopeParsers),
      SingleTokenPattern(Token.Type.SYMBOL, "}")
    ], optional: true)
  ])

  ParserBase[] fieldScopeParsers => [
    FieldAccessorFunctionParser(),
    FieldMutatorFunctionParser()
  ]

  override public generateNode() -> FieldNode {
    let type = lastMatch.getValue("declaration_type")
    let name = lastMatch.getValue("declaration_name")
    let bracketCount = lastMatch.getValues("bracket_start").count

    return FieldNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount
    )
  }
}