package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FieldNode
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

import flat/ast/Node

data class extends ParserBase {
  override ParserBase[] childParsers => [
    AssignmentParser(),
  ]

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "declaration_type"),
    Patterns.genericParameters,
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "[", label: "bracket_start"),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "]", label: "bracket_end")
    ], repeat: true, optional: true),
    SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "declaration_name"),
    GroupTokenPattern([
      XorTokenPattern([
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "=>"),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "<=>")
      ]),
      NodeTokenPattern(LocalScopeParser().valueParsers, baseParser: true, label: "field_arrow_value")
    ], optional: true),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "{"),
      NodeGroupTokenPattern(fieldScopeParsers, label: "field_scope"),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "}")
    ], optional: true)
  ], label: "field")

  ParserBase[] fieldScopeParsers => [
    FieldAccessorFunctionParser(),
    FieldMutatorFunctionParser()
  ]

  override public generateNode() -> FieldNode {
    let type = lastMatch.getValue("declaration_type")
    let name = lastMatch.getValue("declaration_name")
    let bracketCount = lastMatch.getValues("bracket_start").count

    return FieldNode(
      name: name
    )
  }
}