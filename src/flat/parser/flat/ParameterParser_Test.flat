package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FileNode
import flat/ast/AnnotationNode
import flat/annotations/PublicModifier
import flat/annotations/LetModifier
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can parse a basic parameter`() {
    let matcher = ParameterParser().matcher
    let result = matcher.matchAll([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ])
    expect(result?.getValue("type")).toBe("String")
    expect(result?.getValue("name")).toBe("test")
  }

  test `can parse a basic parameter with array brackets`() {
    let matcher = ParameterParser().matcher
    let result = matcher.matchAll([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ])
    expect(result?.getValue("type")).toBe("String")
    expect(result?.getValue("name")).toBe("test")
    expect(result?.getValue("bracket_start")).toBe("[")
    expect(result?.getValue("bracket_end")).toBe("]")
  }
}
