package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/ElseNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(ElseParser.class)

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "else"),
    NodeTokenPattern(LocalScopeParser().valueParsers, label: "else_body"),
  ], label: "else")

  override public generateNode() -> ElseNode {
    return ElseNode()
  }

  override public getChildNodeTokenMatches() => NodeTokenMatch[] {
    if (let params = lastMatch.getMatch<GroupTokenMatch>("else")) {
      return (NodeTokenMatch[])params.tokenMatches.filter(m => m.label == "else_body")
    }
  }
}