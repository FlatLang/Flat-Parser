package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FunctionParameterNode
import flat/compiler/models/Token
import flat/compiler/models/SyntaxTokenFunctions
import flat/log/Logger

data class extends ParserBase {
  static Logger log = Logger(FunctionParameterParser.class)

  override ParserBase[] childParsers => Array()
    :addAll(LocalScopeParser().valueParsers)

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "name"),
    CaptureTokenPattern(
      label: "generic_parameters",
      start: Token(value: "<"),
      end: Token(value: ">"),
      allowedTokens: [
        Token(type: Token.Type.IDENTIFIER),
        Token(type: Token.Type.SYMBOL, value: "<"),
        Token(type: Token.Type.SYMBOL, value: ">"),
        Token(type: Token.Type.SYMBOL, value: "["),
        Token(type: Token.Type.SYMBOL, value: "]"),
        Token(type: Token.Type.SYMBOL, value: ",")
      ],
      optional: true
    ),
    CaptureTokenPattern(
      label: "parameters",
      start: Token(value: "("),
      end: Token(value: ")")
    ),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "->"),
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "type"),
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, "[", label: "type_bracket_start"),
        SingleTokenPattern(Token.Type.SYMBOL, "]", label: "type_bracket_end")
      ], repeat: true, optional: true)
    ], optional: true)
  ])

  override public generateNode() -> FunctionParameterNode {
    let type = lastMatch.getValue("type")
    let name = lastMatch.getValue("name")
    let bracketCount = lastMatch.getValues("bracket_start").count

    return FunctionParameterNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount
    )
  }
}