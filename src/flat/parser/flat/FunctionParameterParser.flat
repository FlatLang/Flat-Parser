package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FunctionParameterNode
import flat/compiler/models/Token
import flat/compiler/models/SyntaxTokenFunctions
import flat/log/Logger

data class extends ParserBase {
  static Logger log = Logger(FunctionParameterParser.class)

  override ParserBase[] childParsers => Array():addAll([
    AssignmentParser()
  ])

  override lazy TokenPattern pattern => GroupTokenPattern<FunctionParameterNode>([
    IdentifierParser().pattern,
    NodeTokenPattern([GenericParametersParser()], optional: true),
    CaptureTokenPattern(
      label: "parameters",
      start: Token(value: "("),
      end: Token(value: ")")
    ),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "->"),
      NodeTokenPattern([ValueTypeParser()]),
    ], optional: true)
  ])
}