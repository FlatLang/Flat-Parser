package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FunctionParameterNode
import flat/compiler/models/Token
import flat/compiler/models/SyntaxTokenFunctions
import flat/log/Logger

data class extends ParserBase {
  static Logger log = Logger(FunctionParameterParser.class)

  override ParserBase[] childParsers => Array():addAll([
    AssignmentParser()
  ])

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "name"),
    NodeTokenPattern([GenericParametersParser()], optional: true),
    CaptureTokenPattern(
      label: "parameters",
      start: Token(value: "("),
      end: Token(value: ")")
    ),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "->"),
      NodeTokenPattern([ValueTypeParser()]),
    ], optional: true)
  ])

  override public generateNode() -> FunctionParameterNode {
    let type = lastMatch.getValue("type")
    let name = lastMatch.getValue("name")
    let bracketCount = lastMatch.getValues("bracket_start").count

    return FunctionParameterNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount
    )
  }
}