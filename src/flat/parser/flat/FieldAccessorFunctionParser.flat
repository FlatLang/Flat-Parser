package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FieldAccessorFunctionNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(FieldAccessorFunctionParser.class)

  override ParserBase[] childParsers => [LocalScopeParser()]

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override lazy TokenPattern pattern => SingleTokenPattern(Token.Type.IDENTIFIER, "get")

  override public acceptImmediately() => true
  override public beginsScope() => true

  override public generateNode(ParseContext context, TokenMatch match = lastMatch) -> FieldAccessorFunctionNode {
    return FieldAccessorFunctionNode()
  }
}