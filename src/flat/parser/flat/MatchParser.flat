package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/MatchNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(MatchParser.class)

  ParserBase[] matchChildParsers => Array()
    :addAll([MatchScopeParser()])
    :addAll(MatchScopeParser().childParsers)

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "match"),
    NodeTokenPattern(LocalScopeParser().valueParsers, label: "match_condition"),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "{"),
      NodeGroupTokenPattern(matchChildParsers),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "}")
    ])
  ], label: "match")

  override public generateNode() -> MatchNode {
    return MatchNode()
  }

  override public getChildNodeTokenMatches() => NodeTokenMatch[] {
    if (let params = lastMatch.getMatch<GroupTokenMatch>("match")) {
      return (NodeTokenMatch[])params.tokenMatches.filter({ _.label == "match_condition" })
    }
  }
}