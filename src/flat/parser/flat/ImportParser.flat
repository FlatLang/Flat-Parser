package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/ImportNode
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

data class extends ParserBase {
  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "import"),
    SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "static", optional: true, label: "static"),
    SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "import_location_component"),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "/", label: "import_location_component"),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "import_location_component")
    ], repeat: true, optional: true),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: ".", label: "import_subclass_component"),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "import_subclass_component")
    ], repeat: true, optional: true),
  ])

  override public generateNode() -> ImportNode {
    let components = lastMatch.getValues("import_location_component").plus(lastMatch.getValues("import_subclass_component"))

    return ImportNode(
      location: components.join(),
      staticImport: lastMatch.getValues("static").isNotEmpty
    )
  }
}