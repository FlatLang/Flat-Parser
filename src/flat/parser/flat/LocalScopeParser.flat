package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/LocalScopeNode
import flat/compiler/models/Token

data class extends ParserBase implements ScopeableParser {
  visible ParserBase[] valueParsers => [
    AnnotationParser(),
    ThrowParser(),
    IfParser(),
    TryParser(),
    CatchParser(),
    ElseParser(),
    ExternalParser(),
    ReturnParser(),
    LiteralParser(),
    RegexPatternParser(),
    MatchParser(),
    SwitchParser(),
    WhileLoopParser(),
    ForLoopParser(),
    ForEachLoopParser(),
    FallthroughParser(),
    ContinueParser(),
    BreakParser(),
    LocalDeclarationParser(),
    FunctionCallParser(),
    IdentifierParser(),
    ArrayInstantiationParser(),
    ArrayInitializerParser(),
    UnaryOperationParser(),
    PriorityParser(),
    LocalScopeParser()
  ]

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.SYMBOL, value: "{"),
    NodeGroupTokenPattern(valueParsers, optional: true, label: "scope_body_contents"),
    SingleTokenPattern(Token.Type.SYMBOL, value: "}")
  ], label: "local_scope")

  override public beginsScope() => true

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public generateNode(ParseContext context, TokenMatch match = lastMatch) -> LocalScopeNode {
    return LocalScopeNode()
  }

  override public getChildNodeTokenMatches(ParseContext context, TokenMatch match) => NodeTokenMatch[] {
    if (let body = match.getMatch<NodeGroupTokenMatch>("scope_body_contents")) {
      return body.getChildNodeMatches()
    }
  }
}