package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FieldMutatorFunctionNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(FieldMutatorFunctionParser.class)

  override ParserBase[] childParsers => [LocalScopeParser()]

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, "set"),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "("),
      NodeTokenPattern(parameterParsers, label: "parameter"),
      SingleTokenPattern(Token.Type.SYMBOL, ")")
    ], optional: true)
  ])

  let ParserBase[] parameterParsers => [
    AnnotationParser(),
    ParameterParser(),
    FunctionParameterParser()
  ]

  override public acceptImmediately() => true
  override public beginsScope() => true

  override public generateNode(ParseContext context, TokenMatch match) -> FieldMutatorFunctionNode {
    return FieldMutatorFunctionNode()
  }

  override public getChildNodeTokenMatches(ParseContext context, TokenMatch match) => NodeTokenMatch[] {
    if (let params = match.getMatch<GroupTokenMatch>("parameters")) {
      return (NodeTokenMatch[])params.tokenMatches.filter({ _.label == "parameter" })
    }
  }
}