package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FieldMutatorFunctionNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
  static Logger log = Logger(FieldMutatorFunctionParser.class)

  override ParserBase[] childParsers => [LocalScopeParser()]

  override lazy TokenPattern pattern => GroupTokenPattern<FieldMutatorFunctionNode>([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "set"),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "("),
      NodeTokenPattern(parameterParsers),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: ")")
    ], optional: true)
  ], exact: true)

  let ParserBase[] parameterParsers => [
    AnnotationParser(),
    ParameterParser(),
    FunctionParameterParser()
  ]
}