package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FileNode
import flat/ast/AnnotationNode
import flat/annotations/PublicModifier
import flat/annotations/LetModifier
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can match basic match`() {
    let parser = MatchParser()

    let matcher = parser.matcher
    let result = matcher.matchAll([
      Token(value: "match", type: Token.Type.IDENTIFIER),
      Token(value: "thing", type: Token.Type.IDENTIFIER)
    ], FlatParseContext()).last

    expect(result?.tokens).toBe([
      Token(value: "match", type: Token.Type.IDENTIFIER),
      Token(value: "thing", type: Token.Type.IDENTIFIER)
    ])

    expect(matcher.partial).toBe(true)
  }

  test `can match basic match with dot access`() {
    let parser = MatchParser()

    let matcher = parser.matcher
    let result = matcher.matchAll([
      Token(value: "match", type: Token.Type.IDENTIFIER),
      Token(value: "thing", type: Token.Type.IDENTIFIER),
      Token(value: ".", type: Token.Type.SYMBOL),
      Token(value: "value", type: Token.Type.IDENTIFIER)
    ], FlatParseContext()).last

    expect(result?.tokens).toBe([
      Token(value: "match", type: Token.Type.IDENTIFIER),
      Token(value: "thing", type: Token.Type.IDENTIFIER),
      Token(value: ".", type: Token.Type.SYMBOL),
      Token(value: "value", type: Token.Type.IDENTIFIER)
    ])

    expect(matcher.partial).toBe(true)
  }
}
