package flat/parser/flat

import flat/ast
import flat/parser
import flat/parser/matchers
import flat/compiler/models/Token

data class extends ParserBase {
  override lazy TokenPattern pattern => GroupTokenPattern<TypeNode>([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "type_name", field: "name"),
    NodeTokenPattern([GenericParametersParser()], optional: true),
    CaptureTokenPattern(
      label: "parameters",
      start: Token(value: "("),
      end: Token(value: ")")
    ),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "->"),
      NodeTokenPattern([TypeParser()]),
    ], optional: true, label: "function_type"),
    NodeTokenPattern([ArrayBracketsParser()], repeat: true, optional: true),
  ])
}