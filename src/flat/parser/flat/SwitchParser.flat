package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/SwitchNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(SwitchParser.class)

  ParserBase[] switchChildParsers => Array()
    :addAll([MatchScopeParser()])
    :addAll(MatchScopeParser().childParsers)

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, "switch"),
    NodeTokenPattern(LocalScopeParser().valueParsers, label: "switch_condition"),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "{"),
      NodeGroupTokenPattern(switchChildParsers),
      SingleTokenPattern(Token.Type.SYMBOL, "}")
    ])
  ], label: "switch")

  override public generateNode() -> SwitchNode {
    return SwitchNode()
  }

  override public getChildNodeTokenMatches() => NodeTokenMatch[] {
    if (let params = lastMatch.getMatch<GroupTokenMatch>("switch")) {
      return (NodeTokenMatch[])params.tokenMatches.filter({ _.label == "switch_condition" })
    }
  }
}