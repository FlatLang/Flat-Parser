package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/VariableDeclarationNode
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

data class extends ParserBase {
  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_type"),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "["),
      SingleTokenPattern(Token.Type.SYMBOL, "]")
    ], repeat: true, optional: true, label: "brackets"),
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_name")
  ])

  override public generateNode() -> VariableDeclarationNode {
    let type = lastMatch.getValue("declaration_type")
    let name = lastMatch.getValue("declaration_name")
    let bracketCount = lastMatch.getMatches("brackets").count

    return VariableDeclarationNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount
    )
  }
}