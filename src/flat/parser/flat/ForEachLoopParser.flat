package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/ForEachLoopNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(ForEachLoopParser.class)

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, "for"),
    SingleTokenPattern(Token.Type.SYMBOL, "("),
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "name"),
    SingleTokenPattern(Token.Type.IDENTIFIER, "in"),
    NodeTokenPattern(iteratorParsers, label: "iterator"),
    SingleTokenPattern(Token.Type.SYMBOL, ")"),
    NodeTokenPattern(LocalScopeParser().valueParsers, label: "for_each_loop_body"),
  ])

  let ParserBase[] iteratorParsers => [
    IdentifierParser(),
    LiteralParser(),
    PriorityParser(),
    FunctionCallParser()
  ]

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public beginsScope() => true

  override public generateNode(ParseContext context, TokenMatch match = lastMatch) -> ForEachLoopNode {
    return ForEachLoopNode()
  }
}