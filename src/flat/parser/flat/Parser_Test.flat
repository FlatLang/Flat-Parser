package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/annotations
import flat/compiler/models/Token
import flat/lexer/Lexer
import flat/io/File

testable class {
  async test `can parse function call with complex lambda`() {
    let source = "|
      class {
        func() {
          source.forEach((Pair<String, Object> pair) => {
            if (!dest.containsKey(pair.key)) {
              dest[pair.key] = pair.value
            }

            if (pair.value.class.isOfType(HashMap.class)) {
              let HashMap<String, Object> hashmap = (HashMap)pair.value
              let HashMap<String, Object> existingHashmap = (HashMap)dest[pair.key]
              merge(hashmap, existingHashmap)
            } else {
              dest[pair.key] = pair.value
            }
          })
        }
      }
      |"

    let file = File("Test.flat")
    let stream = Parser().parse(
      FileParser(),
      ParseContext(file: file),
      Lexer().lex(source):emit("start")
    )

    let nodes = Node[]

    stream.on<NodeResult>("data", { nodes.add(_.node) })
    stream.emit("start")
    stream.waitFor("close")

    expect(nodes).toBe([
      ClassNode(),
      FunctionNode(), IdentifierNode(name: ident("func")),
      IdentifierNode(name: ident("source")), DotAccessNode(), FunctionCallNode(), IdentifierNode(name: ident("forEach")), LambdaNode(), LocalScopeNode(),
        IfNode(), PriorityNode(),
          UnaryOperationNode(operator: sym("!")), IdentifierNode(name: ident("dest")), DotAccessNode(), FunctionCallNode(), IdentifierNode(name: ident("containsKey")),
            IdentifierNode(name: ident("pair")), DotAccessNode(), IdentifierNode(name: ident("key")),
        LocalScopeNode(),
          IdentifierNode(name: ident("dest")), ArrayAccessNode(), IdentifierNode(name: ident("pair")), DotAccessNode(), IdentifierNode(name: ident("key")),
            AssignmentNode(),
            IdentifierNode(name: ident("pair")), DotAccessNode(), IdentifierNode(name: ident("value")),
        IfNode(), PriorityNode(),
          IdentifierNode(name: ident("pair")), DotAccessNode(), IdentifierNode(name: ident("value")), DotAccessNode(), IdentifierNode(name: ident("class")), DotAccessNode(), FunctionCallNode(), IdentifierNode(name: ident("isOfType")),
            IdentifierNode(name: ident("HashMap")), DotAccessNode(), IdentifierNode(name: ident("class")),
        LocalScopeNode(),
          LetModifier(aliasUsed: ident("let")), LocalDeclarationNode(),
              TypeNode(name: ident("HashMap")), GenericParametersNode(),
                GenericParameterNode(), TypeNode(name: ident("String")),
                GenericParameterNode(), TypeNode(name: ident("Object")),
              IdentifierNode(name: ident("hashmap")),
            AssignmentNode(),
            CastNode(), TypeNode(name: ident("HashMap")), IdentifierNode(name: ident("pair")), DotAccessNode(), IdentifierNode(name: ident("value")),
          LetModifier(aliasUsed: ident("let")), LocalDeclarationNode(),
              TypeNode(name: ident("HashMap")), GenericParametersNode(),
                GenericParameterNode(), TypeNode(name: ident("String")),
                GenericParameterNode(), TypeNode(name: ident("Object")),
              IdentifierNode(name: ident("existingHashmap")),
            AssignmentNode(),
            CastNode(), TypeNode(name: ident("HashMap")), IdentifierNode(name: ident("dest")), ArrayAccessNode(), IdentifierNode(name: ident("pair")), DotAccessNode(), IdentifierNode(name: ident("key")),
          FunctionCallNode(), IdentifierNode(name: ident("merge")), IdentifierNode(name: ident("hashmap")), IdentifierNode(name: ident("existingHashmap")),
        ElseNode(),
          LocalScopeNode(), IdentifierNode(name: ident("dest")), ArrayAccessNode(), IdentifierNode(name: ident("pair")), DotAccessNode(), IdentifierNode(name: ident("key")),
          AssignmentNode(),
          IdentifierNode(name: ident("pair")), DotAccessNode(), IdentifierNode(name: ident("value"))
    ])
  }

  async test `can parse function call with if-else-if lambda`() {
    let source = "|
      class {
        func() {
          context.currentParsers.forEach((parser) => {
            if (let match = parser.match(token, context)) {
              ParseEngine.log.debugFunc({\"Matched: \#{parser.class.name}\"})
            } else if (parser.matcher.partial) {
              ParseEngine.log.debugFunc({\"Partial match: \#{parser.class.name}\"})
            }
          })
        }
      }
      |"

    let file = File("Test.flat")
    let stream = Parser().parse(
      FileParser(),
      ParseContext(file: file),
      Lexer().lex(source):emit("start")
    )

    let nodes = Node[]

    stream.on<NodeResult>("data", { nodes.add(_.node) })
    stream.emit("start")
    stream.waitFor("close")

    expect(nodes).toBe([
      ClassNode(),
      FunctionNode(), IdentifierNode(name: ident("func")),
        IdentifierNode(name: ident("context")), DotAccessNode(), IdentifierNode(name: ident("currentParsers")), DotAccessNode(), FunctionCallNode(), IdentifierNode(name: ident("forEach")), LambdaNode(), LocalScopeNode(),
          IfNode(), PriorityNode(),
            LetModifier(aliasUsed: ident("let")), LocalDeclarationNode(),
              IdentifierNode(name: ident("match")),
            AssignmentNode(),
            IdentifierNode(name: ident("parser")), DotAccessNode(), FunctionCallNode(), IdentifierNode(name: ident("match")), IdentifierNode(name: ident("token")), IdentifierNode(name: ident("context")),
          LocalScopeNode(),
            IdentifierNode(name: ident("ParseEngine")), DotAccessNode(), IdentifierNode(name: ident("log")), DotAccessNode(), FunctionCallNode(), IdentifierNode(name: ident("debugFunc")),
              LambdaNode(), LocalScopeNode(), StringLiteralNode(value: str("\"Matched: \#{parser.class.name}\"")),
          ElseNode(), IfNode(), PriorityNode(),
            IdentifierNode(name: ident("parser")), DotAccessNode(), IdentifierNode(name: ident("matcher")), DotAccessNode(), IdentifierNode(name: ident("partial")),
          LocalScopeNode(),
            IdentifierNode(name: ident("ParseEngine")), DotAccessNode(), IdentifierNode(name: ident("log")), DotAccessNode(), FunctionCallNode(), IdentifierNode(name: ident("debugFunc")),
              LambdaNode(), LocalScopeNode(), StringLiteralNode(value: str("\"Partial match: \#{parser.class.name}\""))
    ])
  }

  ident(String value) => Token(value: value, type: Token.Type.IDENTIFIER)
  sym(String value) => Token(value: value, type: Token.Type.SYMBOL)
  str(String value) => Token(value: value, type: Token.Type.STRING)
}
