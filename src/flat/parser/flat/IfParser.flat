package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/IfNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(IfParser.class)

  override ParserBase[] childParsers => Array()
    :addAll(LocalScopeParser().childParsers)

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, "if"),
    SingleTokenPattern(Token.Type.SYMBOL, "("),
    NodeTokenPattern(conditionParsers, label: "condition"),
    SingleTokenPattern(Token.Type.SYMBOL, ")")
  ])

  ParserBase[] conditionParsers => [
    AnnotationParser(),
    NamedArgumentParser(),
    FunctionCallParser(),
    IdentifierParser(),
    LiteralParser(),
    RegexPatternParser(),
    LambdaParser(),
    ArrayInitializerParser(),
    UnaryOperationParser(),
    CastParser(),
    LocalDeclarationParser()
  ]

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public acceptImmediately() => true
  override public beginsScope() => true

  override public generateNode(ParseContext context, TokenMatch match) -> IfNode {
    return IfNode()
  }

  override public getChildNodeTokenMatches(ParseContext context, TokenMatch match) => NodeTokenMatch[] {
    return match.getMatches<NodeTokenMatch>("condition")
  }
}