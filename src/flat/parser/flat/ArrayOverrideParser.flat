package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/ArrayOverrideNode
import flat/compiler/models/Token

data class extends ParserBase {
  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "this"),
    SingleTokenPattern(type: Token.Type.SYMBOL, value: "["),
    ParameterParser().pattern,
    SingleTokenPattern(type: Token.Type.SYMBOL, value: "]"),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "->"),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "type"),
      NodeTokenPattern([GenericParametersParser()], optional: true),
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "[", label: "type_bracket_start"),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "]", label: "type_bracket_end")
      ], repeat: true, optional: true)
    ], optional: true, label: "array_overload_type"),
    GroupTokenPattern([
      XorTokenPattern([
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "=>"),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "<=>")
      ]),
      NodeTokenPattern(LocalScopeParser().valueParsers, baseParser: true, label: "array_override_arrow_value")
    ], optional: true),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "{"),
      NodeGroupTokenPattern(arrayOverrideScopeParsers, label: "array_override_scope"),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "}")
    ], optional: true),
  ], label: "array_override")

  ParserBase[] arrayOverrideScopeParsers => [
    FieldAccessorFunctionParser(),
    FieldMutatorFunctionParser()
  ]

  override public generateNode() -> ArrayOverrideNode {
    return ArrayOverrideNode()
  }
}