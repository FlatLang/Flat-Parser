package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/compiler/models/Token
import flat/annotations/LetModifier
import flat/annotations/VarModifier

import flat/extensions/SyntaxStringFunctions

data class extends ParserBase {
  override ParserBase[] childParsers => [
    AssignmentParser()
  ]

  override lazy TokenPattern pattern => XorTokenPattern<LocalDeclarationNode>([
    GroupTokenPattern([
      XorTokenPattern([
        PreconditionTokenPattern(annotations: [LetModifier.class]),
        PreconditionTokenPattern(annotations: [VarModifier.class])
      ], label: "implicit_modifier"),
      IdentifierParser().pattern,
    ]),
    GroupTokenPattern([
      XorTokenPattern([
        PreconditionTokenPattern(annotations: [LetModifier.class]),
        PreconditionTokenPattern(annotations: [VarModifier.class])
      ], optional: true, label: "implicit_modifier"),
      NodeTokenPattern([ValueTypeParser()]),
      IdentifierParser().pattern,
    ])
  ], label: "local_declaration")
}