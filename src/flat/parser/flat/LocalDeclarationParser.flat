package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/LocalDeclarationNode
import flat/compiler/models/Token
import flat/annotations/LetModifier
import flat/annotations/VarModifier

import flat/extensions/SyntaxStringFunctions

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    AssignmentParser()
  ])

  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => XorTokenPattern([
    GroupTokenPattern([
      XorTokenPattern([
        PreconditionTokenPattern(annotations: [LetModifier.class]),
        PreconditionTokenPattern(annotations: [VarModifier.class])
      ], label: "implicit_modifier"),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "declaration_name")
    ]),
    GroupTokenPattern([
      XorTokenPattern([
        PreconditionTokenPattern(annotations: [LetModifier.class]),
        PreconditionTokenPattern(annotations: [VarModifier.class])
      ], optional: true, label: "implicit_modifier"),
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "declaration_type"),
        CaptureTokenPattern(
          label: "generic_parameters",
          skipGenerics: false,
          start: Token(value: "<"),
          end: Token(value: ">"),
          allowedTokens: [
            Token(type: Token.Type.IDENTIFIER),
            Token(type: Token.Type.SYMBOL, value: "<"),
            Token(type: Token.Type.SYMBOL, value: ">"),
            Token(type: Token.Type.SYMBOL, value: "["),
            Token(type: Token.Type.SYMBOL, value: "]"),
            Token(type: Token.Type.SYMBOL, value: ",")
          ],
          optional: true
        ),
        GroupTokenPattern([
          SingleTokenPattern(type: Token.Type.SYMBOL, value: "["),
          SingleTokenPattern(type: Token.Type.SYMBOL, value: "]")
        ], repeat: true, greedy: false, optional: true, label: "brackets")
      ], label: "type"),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "declaration_name")
    ])
  ], label: "local_declaration")

  override public generateNode() -> LocalDeclarationNode {
    return LocalDeclarationNode(
      type: lastMatch.getValue("declaration_type"),
      name: lastMatch.getValue("declaration_name"),
      arrayDimensions: lastMatch.getMatches("brackets").count
    )
  }
}