package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/ParameterNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    AssignmentParser()
  ])

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "type"),
    CaptureTokenPattern(
      label: "generic_parameters",
      skipGenerics: false,
      start: Token(value: "<"),
      end: Token(value: ">"),
      allowedTokens: [
        Token(type: Token.Type.IDENTIFIER),
        Token(type: Token.Type.SYMBOL, value: "<"),
        Token(type: Token.Type.SYMBOL, value: ">"),
        Token(type: Token.Type.SYMBOL, value: "["),
        Token(type: Token.Type.SYMBOL, value: "]"),
        Token(type: Token.Type.SYMBOL, value: "("),
        Token(type: Token.Type.SYMBOL, value: ")"),
        Token(type: Token.Type.SYMBOL, value: "->"),
        Token(type: Token.Type.SYMBOL, value: "."),
        Token(type: Token.Type.SYMBOL, value: ",")
      ],
      optional: true
    ),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "[", label: "bracket_start"),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "]", label: "bracket_end")
    ], repeat: true, optional: true),
    SingleTokenPattern(type: Token.Type.SYMBOL, value: ":", label: "require_name", optional: true),
    SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "name")
  ], label: "parameter")

  override public generateNode() -> ParameterNode {
    let type = lastMatch.getValue("type")
    let name = lastMatch.getValue("name")
    let bracketCount = lastMatch.getValues("bracket_start").count

    return ParameterNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount,
      requireName: lastMatch.getValue("require_name") != null
    )
  }
}