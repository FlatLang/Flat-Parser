package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/annotations
import flat/ast
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

data class extends ParserBase {
  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => XorTokenPattern([
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: VisibleModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: VisibleModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: PublicModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: PublicModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: PrivateModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: PrivateModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: LetModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: LetModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: VarModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: VarModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: StaticModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: StaticModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: AsyncModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: AsyncModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: DataModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: DataModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: LazyModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: LazyModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: NativeModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: NativeModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: TestableModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: TestableModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: TestModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: TestModifier.aliases, label: "alias"),
    ]),
    GroupTokenPattern([
      PreconditionTokenPattern(parentTypes: OverrideModifier.allowedNodeContexts),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: OverrideModifier.aliases, label: "alias"),
    ]),
  ])

  override public generateNode() -> AnnotationNode => null {
    let alias = lastMatch.getValue("alias")

    if (VisibleModifier.aliases.any({ _ == alias})) {
      return VisibleModifier(aliasUsed: alias)
    }
    if (PublicModifier.aliases.any({ _ == alias})) {
      return PublicModifier(aliasUsed: alias)
    }
    if (PrivateModifier.aliases.any({ _ == alias})) {
      return PrivateModifier(aliasUsed: alias)
    }
    if (LetModifier.aliases.any({ _ == alias})) {
      return LetModifier(aliasUsed: alias)
    }
    if (VarModifier.aliases.any({ _ == alias})) {
      return VarModifier(aliasUsed: alias)
    }
    if (StaticModifier.aliases.any({ _ == alias})) {
      return StaticModifier(aliasUsed: alias)
    }
    if (AsyncModifier.aliases.any({ _ == alias})) {
      return AsyncModifier(aliasUsed: alias)
    }
    if (DataModifier.aliases.any({ _ == alias})) {
      return DataModifier(aliasUsed: alias)
    }
    if (LazyModifier.aliases.any({ _ == alias})) {
      return LazyModifier(aliasUsed: alias)
    }
    if (NativeModifier.aliases.any({ _ == alias})) {
      return NativeModifier(aliasUsed: alias)
    }
    if (TestableModifier.aliases.any({ _ == alias})) {
      return TestableModifier(aliasUsed: alias)
    }
    if (TestModifier.aliases.any({ _ == alias})) {
      return TestModifier(aliasUsed: alias)
    }
    if (OverrideModifier.aliases.any({ _ == alias})) {
      return OverrideModifier(aliasUsed: alias)
    }
  }
}