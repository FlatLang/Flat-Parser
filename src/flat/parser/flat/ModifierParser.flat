package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/annotations
import flat/ast
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

data class extends ParserBase {
  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => SingleTokenPattern(
    type: Token.Type.IDENTIFIER,
    label: "alias",
    values: Array()
      :addAll(VisibleModifier.aliases)
      :addAll(PublicModifier.aliases)
      :addAll(PrivateModifier.aliases)
      :addAll(LetModifier.aliases)
      :addAll(VarModifier.aliases)
      :addAll(StaticModifier.aliases)
      :addAll(AsyncModifier.aliases)
      :addAll(DataModifier.aliases)
      :addAll(LazyModifier.aliases)
      :addAll(NativeModifier.aliases)
      :addAll(TestableModifier.aliases)
      :addAll(TestModifier.aliases)
  )

  override public generateNode() -> AnnotationNode => null {
    let alias = lastMatch.getValue("alias")

    if (VisibleModifier.aliases.any({ _ == alias})) {
      return VisibleModifier(aliasUsed: alias)
    }
    if (PublicModifier.aliases.any({ _ == alias})) {
      return PublicModifier(aliasUsed: alias)
    }
    if (PrivateModifier.aliases.any({ _ == alias})) {
      return PrivateModifier(aliasUsed: alias)
    }
    if (LetModifier.aliases.any({ _ == alias})) {
      return LetModifier(aliasUsed: alias)
    }
    if (VarModifier.aliases.any({ _ == alias})) {
      return VarModifier(aliasUsed: alias)
    }
    if (StaticModifier.aliases.any({ _ == alias})) {
      return StaticModifier(aliasUsed: alias)
    }
    if (AsyncModifier.aliases.any({ _ == alias})) {
      return AsyncModifier(aliasUsed: alias)
    }
    if (DataModifier.aliases.any({ _ == alias})) {
      return DataModifier(aliasUsed: alias)
    }
    if (LazyModifier.aliases.any({ _ == alias})) {
      return LazyModifier(aliasUsed: alias)
    }
    if (NativeModifier.aliases.any({ _ == alias})) {
      return NativeModifier(aliasUsed: alias)
    }
    if (TestableModifier.aliases.any({ _ == alias})) {
      return TestableModifier(aliasUsed: alias)
    }
    if (TestModifier.aliases.any({ _ == alias})) {
      return TestModifier(aliasUsed: alias)
    }
  }
}