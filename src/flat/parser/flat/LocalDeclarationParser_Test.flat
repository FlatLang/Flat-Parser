package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FileNode
import flat/ast/AnnotationNode
import flat/annotations/PublicModifier
import flat/annotations/LetModifier
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can match a basic local declaration with let modifier and without an explicit type`() {
    let parser = LocalDeclarationParser()

    let context = ParseContext(
      annotations: [LetModifier(aliasUsed: "let")]
    )

    let matcher = parser.matcher
    let result = matcher.matchAll([
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ], context).last

    expect(result?.tokens).toBe([
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ])

    expect(result?.getValue("name")).toBe("test")
    expect(matcher.partial).toBe(true)
  }

  test `can match a basic local declaration with let modifier and an explicit type`() {
    let parser = LocalDeclarationParser()

    let context = ParseContext(
      annotations: [LetModifier(aliasUsed: "let")]
    )

    let matcher = parser.matcher
    let result = matcher.matchAll([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ], context).last

    expect(result?.tokens).toBe([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ])

    expect(result?.getValue("type_name")).toBe("String")
    expect(result?.getValue("name")).toBe("test")
    expect(matcher.partial).toBe(false)
  }

  test `can match a basic local declaration with let modifier and an explicit type with array brackets`() {
    let parser = LocalDeclarationParser()

    let context = ParseContext(
      annotations: [LetModifier(aliasUsed: "let")]
    )

    let matcher = parser.matcher
    let result = matcher.matchAll([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ], context).last

    expect(result?.tokens).toBe([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ])

    expect(result?.getValue("type_name")).toBe("String")
    expect(result?.getMatches("brackets").count).toBe(1)
    expect(result?.getValue("name")).toBe("test")
    expect(matcher.partial).toBe(false)
  }

  test `can match a basic local declaration without let modifier and an explicit type`() {
    let parser = LocalDeclarationParser()

    let context = ParseContext()

    let matcher = parser.matcher
    let result = matcher.matchAll([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ], context).last

    expect(result?.tokens).toBe([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ])

    expect(result?.getValue("type_name")).toBe("String")
    expect(result?.getValue("name")).toBe("test")
    expect(matcher.partial).toBe(false)
  }

  test `can match a basic local declaration without let modifier and an explicit type with array brackets`() {
    let parser = LocalDeclarationParser()

    let context = ParseContext()

    let matcher = parser.matcher
    let result = matcher.matchAll([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ], context).last

    expect(result?.tokens).toBe([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ])

    expect(result?.getValue("type_name")).toBe("String")
    expect(result?.getMatches("brackets").count).toBe(1)
    expect(result?.getValue("name")).toBe("test")
    expect(matcher.partial).toBe(false)
  }
}
