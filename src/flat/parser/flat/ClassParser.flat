package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/compiler/models/Token

data class extends ParserBase {
  override lazy TokenPattern pattern => GroupTokenPattern<ClassNode>([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, values: ["class", "trait", "interface"], field: "type"),
    GroupTokenPattern([
      SingleTokenPattern<IdentifierNode>(type: Token.Type.IDENTIFIER, field: "name"),
      NodeTokenPattern([GenericParametersParser()], optional: true)
    ], optional: true, greedy: false),
    GroupTokenPattern<ClassExtendsNode>([
      SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "extends"),
      SingleTokenPattern<IdentifierNode>(type: Token.Type.IDENTIFIER, field: "name"),
      NodeTokenPattern([GenericArgumentsParser()], optional: true)
    ], optional: true),
    GroupTokenPattern<ClassImplementsNode>([
      SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "implements"),
      SingleTokenPattern<IdentifierNode>(type: Token.Type.IDENTIFIER, field: "name"),
      NodeTokenPattern([GenericArgumentsParser()], optional: true),
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.SYMBOL, value: ","),
        SingleTokenPattern<IdentifierNode>(type: Token.Type.IDENTIFIER, field: "name"),
        NodeTokenPattern([GenericArgumentsParser()], optional: true)
      ], repeat: true, optional: true),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: ",", optional: true),
    ], optional: true),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "{"),
      NodeGroupTokenPattern(classBodyParsers, optional: true),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "}")
    ])
  ])

  ParserBase[] classBodyParsers => [
    AnnotationParser(),
    ClassParser(),
    StaticBlockParser(),
    FieldParser(),
    ArrayOverrideParser(),
    FunctionParser(),
  ]
}