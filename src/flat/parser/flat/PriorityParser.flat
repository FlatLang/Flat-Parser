package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/PriorityNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
  static Logger log = Logger(PriorityParser.class)

  override ParserBase[] childParsers => Array()
    :addAll(LocalScopeParser().childParsers)
    :add(BinaryOperationParser())

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.SYMBOL, "("),
    NodeTokenPattern(FunctionParser().childParsers, label: "value"),
    SingleTokenPattern(Token.Type.SYMBOL, ")")
  ], label: "priority")

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public generateNode(ParseContext context, TokenMatch match) -> PriorityNode {
    return PriorityNode()
  }

  override public getChildNodeTokenMatches(ParseContext context, TokenMatch match) => NodeTokenMatch[] {
    if (let params = match.getMatch<GroupTokenMatch>("priority")) {
      return (NodeTokenMatch[])params.tokenMatches.filter({ _.label == "value" })
    }
  }
}