package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/datastruct/HashMap
import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/ImportNode
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can parse import declaration`() {
    let parser = ImportParser()
    parser.context = FlatParseContext()
    let result = parser.matchAll([
      Token(value: "import", type: Token.Type.IDENTIFIER),
      Token(value: "flat", type: Token.Type.IDENTIFIER),
      Token(value: "/", type: Token.Type.SYMBOL),
      Token(value: "thing", type: Token.Type.IDENTIFIER),
      Token(value: "/", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER),
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "import", type: Token.Type.IDENTIFIER),
      Token(value: "flat", type: Token.Type.IDENTIFIER),
      Token(value: "/", type: Token.Type.SYMBOL),
      Token(value: "thing", type: Token.Type.IDENTIFIER),
      Token(value: "/", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER),
    ])

    expect(parser.generateNode()).toBe(
      ImportNode(location: "flat/thing/test")
    )
  }

  test `can parse single letter import declaration`() {
    let parser = ImportParser()
    parser.context = FlatParseContext()
    let result = parser.matchAll([
      Token(value: "import", type: Token.Type.IDENTIFIER),
      Token(value: "a", type: Token.Type.IDENTIFIER),
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "import", type: Token.Type.IDENTIFIER),
      Token(value: "a", type: Token.Type.IDENTIFIER),
    ])

    expect(parser.generateNode()).toBe(
      ImportNode(location: "a")
    )
  }

  test `can match basic import`() {
    let matcher = ImportParser().matcher
    let result = matcher.matchAll([
      Token(value: "import", type: Token.Type.IDENTIFIER),
      Token(value: "bob", type: Token.Type.IDENTIFIER),
      Token(value: "/", type: Token.Type.SYMBOL),
      Token(value: "flob", type: Token.Type.IDENTIFIER)
    ], FlatParseContext()).last

    let expected = [
      Token(value: "import", type: Token.Type.IDENTIFIER),
      Token(value: "bob", type: Token.Type.IDENTIFIER),
      Token(value: "/", type: Token.Type.SYMBOL),
      Token(value: "flob", type: Token.Type.IDENTIFIER)
    ]

    expect(result?.tokens).toBe(expected)
    expect(matcher.partial).toBe(true)
  }

  test `can match static import`() {
    let matcher = ImportParser().matcher
    let result = matcher.matchAll([
      Token(value: "import", type: Token.Type.IDENTIFIER),
      Token(value: "static", type: Token.Type.IDENTIFIER),
      Token(value: "bob", type: Token.Type.IDENTIFIER),
      Token(value: "/", type: Token.Type.SYMBOL),
      Token(value: "flob", type: Token.Type.IDENTIFIER)
    ], FlatParseContext()).last

    let expected = [
      Token(value: "import", type: Token.Type.IDENTIFIER),
      Token(value: "static", type: Token.Type.IDENTIFIER),
      Token(value: "bob", type: Token.Type.IDENTIFIER),
      Token(value: "/", type: Token.Type.SYMBOL),
      Token(value: "flob", type: Token.Type.IDENTIFIER)
    ]

    expect(result?.tokens).toBe(expected)
    expect(matcher.partial).toBe(true)
  }
}
