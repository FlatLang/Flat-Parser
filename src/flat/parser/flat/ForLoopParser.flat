package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/ForLoopNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(ForLoopParser.class)

  override ParserBase[] childParsers => Array()
    :addAll(LocalScopeParser().childParsers)

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, "for"),
    CaptureTokenPattern(
      label: "condition",
      start: Token(value: "("),
      end: Token(value: ")")
    )
  ])

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public acceptImmediately() => true
  override public beginsScope() => true

  override public generateNode(ParseContext context, TokenMatch match) -> ForLoopNode {
    return ForLoopNode()
  }
}