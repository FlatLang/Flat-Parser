package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/ForLoopNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase implements ScopeableParser {
  static Logger log = Logger(ForLoopParser.class)

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, "for"),
    SingleTokenPattern(Token.Type.SYMBOL, "("),
    NodeTokenPattern(initializerParsers, label: "initializer", optional: true),
    SingleTokenPattern(Token.Type.SYMBOL, ";"),
    NodeTokenPattern(conditionParsers, label: "condition", optional: true),
    SingleTokenPattern(Token.Type.SYMBOL, ";"),
    NodeTokenPattern(incrementerParsers, label: "incrementer", optional: true),
    SingleTokenPattern(Token.Type.SYMBOL, ")"),
    NodeTokenPattern(LocalScopeParser().valueParsers, label: "for_loop_body"),
  ])

  let ParserBase[] initializerParsers => [
    AnnotationParser(),
    IdentifierParser(),
    LocalDeclarationParser()
  ]

  let ParserBase[] conditionParsers => [
    AnnotationParser(),
    IdentifierParser(),
    LiteralParser(),
    PriorityParser(),
    FunctionCallParser()
  ]

  let ParserBase[] incrementerParsers => [
    AnnotationParser(),
    IdentifierParser(),
    LiteralParser(),
    PriorityParser(),
    FunctionCallParser(),
    UnaryOperationParser()
  ]

  override public generateNode() -> ForLoopNode {
    return ForLoopNode()
  }
}