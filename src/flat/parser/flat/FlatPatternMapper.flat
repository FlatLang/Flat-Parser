package flat/parser/flat

import flat/ast
import flat/parser
import flat/annotations

class {
    public static getMapper() => PatternMapper()
        :addPattern(AnnotationParser().pattern)
        :addPattern(ArrayAccessParser().pattern)
        :addPattern(ArrayBracketsParser().pattern)
        :addPattern(ArrayInitializerParser().pattern)
        :addPattern(ArrayInstantiationParser().pattern)
        :addPattern(ArrayOverrideParser().pattern)
        :addPattern(ArrowExpressionParser().pattern)
        :addPattern(AssignmentParser().pattern)
        :addPattern(BinaryOperationParser().pattern)
        :addPattern(BreakParser().pattern)
        :addPattern(CastParser().pattern)
        :addPattern(CatchParser().pattern)
        :addPattern(ClassParser().pattern)
        :addPattern(ColonAccessParser().pattern)
        :addPattern(CommentParser().pattern)
        :addPattern(ContinueParser().pattern)
        :addPattern(DotAccessParser().pattern)
        :addPattern(DoubleArrowExpressionParser().pattern)
        :addPattern(ElseParser().pattern)
        :addPattern(ExternalParser().pattern)
        :addPattern(FallthroughParser().pattern)
        :addPattern(FieldAccessorFunctionParser().pattern)
        :addPattern(FieldMutatorFunctionParser().pattern)
        :addPattern(FieldParser().pattern)
        :addPattern(ForEachLoopParser().pattern)
        :addPattern(ForLoopParser().pattern)
        :addPattern(FunctionCallParser().pattern)
        :addPattern(FunctionParameterParser().pattern)
        :addPattern(FunctionParser().pattern)
        :addPattern(FunctionTypeParser().pattern)
        :addPattern(GenericArgumentParser().pattern)
        :addPattern(GenericArgumentsParser().pattern)
        :addPattern(GenericParameterParser().pattern)
        :addPattern(GenericParametersParser().pattern)
        :addPattern(IdentifierParser().pattern)
        :addPattern(IfParser().pattern)
        :addPattern(ImportParser().pattern)
        :addPattern(IntRangeParser().pattern)
        :addPattern(LambdaParser().pattern)
        :addPattern(LiteralParser().pattern)
        :addPattern(LiteralParser.StringLiteralParser().pattern)
        :addPattern(LiteralParser.CharLiteralParser().pattern)
        :addPattern(LiteralParser.IntegerLiteralParser().pattern)
        :addPattern(LiteralParser.BoolLiteralParser().pattern)
        :addPattern(LiteralParser.NullLiteralParser().pattern)
        :addPattern(LocalDeclarationParser().pattern)
        :addPattern(LocalScopeParser().pattern)
        :addPattern(MatchCaseParser().pattern)
        :addPattern(MatchParser().pattern)
        :addPattern(ModifierParser().pattern)
        :addPattern(NamedArgumentParser().pattern)
        :addPattern(PackageParser().pattern)
        :addPattern(ParameterParser().pattern)
        :addPattern(PriorityParser().pattern)
        :addPattern(RegexPatternParser().pattern)
        :addPattern(ReturnParser().pattern)
        :addPattern(SafeAccessParser().pattern)
        :addPattern(StaticBlockParser().pattern)
        :addPattern(SwitchParser().pattern)
        :addPattern(TargetAnnotationParser().pattern)
        :addPattern(TargetRuntimeAnnotationParser().pattern)
        :addPattern(TernaryParser().pattern)
        :addPattern(TestSuiteAnnotationParser().pattern)
        :addPattern(ThisModifierParser().pattern)
        :addPattern(ThrowParser().pattern)
        :addPattern(TryParser().pattern)
        :addPattern(TypeParser().pattern)
        :addPattern(UnaryOperationParser().pattern)
        :addPattern(ValueTypeParser().pattern)
        :addPattern(VariableDeclarationParser().pattern)
        :addPattern(WhileLoopParser().pattern)
        :addResolver({ _.isOfType(Modifier.class) ? ModifierParser().pattern : null })
        :addResolver({ _.isOfType(AnnotationNode.class) ? AnnotationParser().pattern : null })
}