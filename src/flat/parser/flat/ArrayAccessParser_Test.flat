package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/FileNode
import flat/ast/AnnotationNode
import flat/annotations/PublicModifier
import flat/annotations/LetModifier
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can match a basic array access`() {
    let parser = ArrayAccessParser()
    parser.context = ParseContext()
    let result = parser.matchAll([
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "]", type: Token.Type.SYMBOL)
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "]", type: Token.Type.SYMBOL)
    ])
    expect(parser.matcher.partial).toBe(false)
  }

  test `can match a basic array access with integer index`() {
    let parser = ArrayAccessParser()
    parser.context = ParseContext()
    let result = parser.matchAll([
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "1", type: Token.Type.INTEGER),
      Token(value: "]", type: Token.Type.SYMBOL)
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "1", type: Token.Type.INTEGER),
      Token(value: "]", type: Token.Type.SYMBOL)
    ])
    expect(parser.matcher.partial).toBe(false)
  }
}
