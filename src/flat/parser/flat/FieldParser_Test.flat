package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/datastruct/HashMap
import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/FieldNode
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can parse declaration`() {
    let parser = FieldParser()
    parser.context = FlatParseContext()
    let result = parser.matchAll([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "test", type: Token.Type.IDENTIFIER),
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "test", type: Token.Type.IDENTIFIER),
    ])

    expect(parser.generateNode()).toBe(
      FieldNode(
        type: "String",
        name: "test"
      )
    )
  }

  test `can parse declaration with array type`() {
    let parser = FieldParser()
    parser.context = FlatParseContext()
    let result = parser.matchAll([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER),
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER),
    ])

    expect(parser.generateNode()).toBe(
      FieldNode(
        type: "String",
        name: "test",
        arrayDimensions: 1
      )
    )
  }
}
