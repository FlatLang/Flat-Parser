package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/datastruct/HashMap
import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/ImportNode
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can match basic if`() {
    let matcher = IfParser().matcher
    let result = matcher.matchAll([
      Token(value: "if", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: "flob", type: Token.Type.IDENTIFIER),
      Token(value: ")", type: Token.Type.SYMBOL)
    ]).last

    let expected = [
      Token(value: "if", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: "flob", type: Token.Type.IDENTIFIER),
      Token(value: ")", type: Token.Type.SYMBOL)
    ]

    expect(result?.tokens).toBe(expected)
    expect(matcher.partial).toBe(false)
  }

  test `can match if with binary expression in condition`() {
    let matcher = IfParser().matcher
    let result = matcher.matchAll([
      Token(value: "if", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: "args", type: Token.Type.IDENTIFIER),
      Token(value: ".", type: Token.Type.SYMBOL),
      Token(value: "count", type: Token.Type.IDENTIFIER),
      Token(value: "<", type: Token.Type.SYMBOL),
      Token(value: "2", type: Token.Type.INTEGER),
      Token(value: ")", type: Token.Type.SYMBOL)
    ]).last

    let expected = [
      Token(value: "if", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: "args", type: Token.Type.IDENTIFIER),
      Token(value: ".", type: Token.Type.SYMBOL),
      Token(value: "count", type: Token.Type.IDENTIFIER),
      Token(value: "<", type: Token.Type.SYMBOL),
      Token(value: "2", type: Token.Type.INTEGER),
      Token(value: ")", type: Token.Type.SYMBOL)
    ]

    expect(result?.tokens).toBe(expected)
    expect(matcher.partial).toBe(false)
  }
}
