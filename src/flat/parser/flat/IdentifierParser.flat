package flat/parser/flat

import flat/parser
import flat/parser/matchers
import flat/ast/IdentifierNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => [
    DotAccessParser(),
    SafeAccessParser(),
    IntRangeParser(),
    BinaryOperationParser(),
    TernaryParser(),
    ColonAccessParser(),
    AssignmentParser(),
    ArrayAccessParser(),
    UnaryOperationParser(),
    MatchCaseParser()
  ]

  override lazy TokenPattern pattern => XorTokenPattern([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "name", notValues: ["if"]),
    CaptureTokenPattern(
      start: Token(value: "`"),
      end: Token(value: "`"),
      label: "literal_name"
    ),
  ])

  override public generateNode() -> IdentifierNode {
    return IdentifierNode(
      name: lastMatch.getValue("name")
    )
  }
}