package flat/parser

import flat/ast/PackageNode
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

class extends ParserBase {
  override let lazy TokenMatcher matcher => TokenMatcherGroup([
    TokenMatcher(Token.Type.IDENTIFIER, "package"),
    TokenMatcher(Token.Type.IDENTIFIER, label: "package_location_component"),
    TokenMatcherGroup([
      TokenMatcher(Token.Type.SYMBOL, "/", label: "package_location_component"),
      TokenMatcher(Token.Type.IDENTIFIER, label: "package_location_component")
    ], repeat: true, optional: true)
  ])

  override public async generateNode(ParseContext context, TokenMatch match) -> PackageNode {
    let components = match.getValues("package_location_component")

    return PackageNode(
      location: components.join()
    )
  }
}