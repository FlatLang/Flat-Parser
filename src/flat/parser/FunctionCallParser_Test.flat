package flat/parser

import flat/datastruct/HashMap
import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/FunctionNode
import flat/ast/ParameterNode
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can match basic function call without arguments`() {
    let matcher = FunctionCallParser().matcher
    let result = matcher.matchAll([
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: ")", type: Token.Type.SYMBOL)
    ]).last

    let expected = [
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: ")", type: Token.Type.SYMBOL)
    ]

    expect(result?.tokens).toBe(expected)
    expect(matcher.partial).toBe(false)
  }

  test `can match function call within a function call`() {
    let matcher = FunctionCallParser().matcher
    let result = matcher.matchAll([
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: "test2", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: ")", type: Token.Type.SYMBOL),
      Token(value: ")", type: Token.Type.SYMBOL)
    ]).last

    let expected = [
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: "test2", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: ")", type: Token.Type.SYMBOL),
      Token(value: ")", type: Token.Type.SYMBOL)
    ]

    expect(result?.tokens).toBe(expected)
    expect(matcher.partial).toBe(false)
  }

  test `does not completely match partial function call`() {
    let matcher = FunctionCallParser().matcher
    let match = matcher.matchAll([
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: "value", type: Token.Type.IDENTIFIER)
    ]).last

    expect(match).toBe(null)
  }

  test `can match function call with multiple arguments`() {
    let matcher = FunctionCallParser().matcher
    let result = matcher.matchAll([
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: "arg1", type: Token.Type.IDENTIFIER),
      Token(value: ",", type: Token.Type.SYMBOL),
      Token(value: "arg2", type: Token.Type.IDENTIFIER),
      Token(value: ")", type: Token.Type.SYMBOL)
    ]).last

    let expected = [
      Token(value: "test", type: Token.Type.IDENTIFIER),
      Token(value: "(", type: Token.Type.SYMBOL),
      Token(value: "arg1", type: Token.Type.IDENTIFIER),
      Token(value: ",", type: Token.Type.SYMBOL),
      Token(value: "arg2", type: Token.Type.IDENTIFIER),
      Token(value: ")", type: Token.Type.SYMBOL)
    ]

    expect(result?.tokens).toBe(expected)
    expect(matcher.partial).toBe(false)
  }
}
