package flat/parser

import flat/ast/MatchCaseNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
  let static Logger log = Logger(MatchParser.class)

  override ParserBase[] childParsers => Array()
    :addAll([FunctionScopeParser()])
    :addAll(FunctionScopeParser().childParsers)

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override lazy TokenPattern pattern => SingleTokenPattern(Token.Type.SYMBOL, "=>")

  override public generateNode(ParseContext context, TokenMatch match) -> MatchCaseNode {
    return MatchCaseNode()
  }
}