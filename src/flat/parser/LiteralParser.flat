package flat/parser

import flat/ast/LiteralNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    DotAccessParser(),
    ColonAccessParser()
  ])

  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => XorTokenPattern([
    SingleTokenPattern(Token.Type.STRING),
    SingleTokenPattern(Token.Type.INTEGER)
  ])

  override public generateNode(ParseContext context, TokenMatch match) -> LiteralNode {
    let token = match.tokens.first

    var Int literalType

    match token.type {
      Token.Type.STRING => literalType = LiteralNode.Type.STRING
      Token.Type.INTEGER => literalType = LiteralNode.Type.INTEGER
    }

    return LiteralNode(
      value: token.value,
      literalType: literalType
    )
  }
}