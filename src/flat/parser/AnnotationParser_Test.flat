package flat/parser

import flat/ast/FileNode
import flat/ast/AnnotationNode
import flat/annotations/PublicModifier
import flat/annotations/LetModifier
import flat/io/File

testable class {
  async test `can parse annotations at front of variable declaration`() {
    let parser = AnnotationParser()

    let context = ParseContext(
      parent: FileNode(File("test.flat"))
    )

    let result = parser.parse("public let String test", context)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = ParseResult.Builder()
      .success(true)
      .remainder("String test")
      .nodes(Array<AnnotationNode>():addAll([
        PublicModifier(aliasUsed: "public", parent: context.parent),
        LetModifier(aliasUsed: "let", parent: context.parent)
      ]))
      .build()

    expect(result).toBe(expected)
  }

  async test `doesnt parse annotations at end of variable declaration`() {
    let parser = AnnotationParser()

    let context = ParseContext(
      parent: FileNode(File("test.flat"))
    )

    let result = parser.parse("String test public let", context)

    let expected = ParseResult.Builder()
      .success(false)
      .remainder("")
      .nodes(Array())
      .build()

    expect(result).toBe(expected)
  }
}
