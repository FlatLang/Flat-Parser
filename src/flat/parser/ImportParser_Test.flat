package flat/parser

import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/ImportNode
import flat/io/File

testable class {
  async test `can parse import declaration`() {
    let parser = ImportParser()

    let request = ParseRequest(
      parent: FileNode(File("test.flat")),
      sourceCode: "import flat/thing/test"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = ImportNode("flat/thing/test")

    expect(result.node).toBe(expected)
  }

  async test `can parse single letter import declaration`() {
    let parser = ImportParser()

    let request = ParseRequest(
      parent: FileNode(File("test.flat")),
      sourceCode: "import a"
    )

    let result = parser.parse(request)

    expect(result).toNotBe(null)
    expect(result.success).toBe(true)

    let expected = ImportNode("a")

    expect(result.node).toBe(expected)
  }

  async test `fails parse if doesnt contain import keyword`() {
    let parser = ImportParser()

    let request = ParseRequest(
      parent: FileNode(File("test.flat"))
    )

    let results = Array<ParseResult>():addAll([
      parser.parse(request.copy(sourceCode: "imporrt")),
      parser.parse(request.copy(sourceCode: " import")),
      parser.parse(request.copy(sourceCode: "test import"))
    ])

    results.forEachAsync((result) => {
      expect(result).toNotBe(null)
      expect(result.success).toBe(false)
      expect(result.errorMessage).toBe("Import declaration doesn't start with \"import\"")
    })
  }

  async test `fails parse if doesnt contain anything after the import keyword`() {
    let parser = ImportParser()

    let request = ParseRequest(
      parent: FileNode(File("test.flat"))
    )

    let results = Array<ParseResult>():addAll([
      parser.parse(request.copy(sourceCode: "import")),
      parser.parse(request.copy(sourceCode: "import "))
    ])

    results.forEachAsync((result) => {
      expect(result).toNotBe(null)
      expect(result.success).toBe(false)
      expect(result.errorMessage).toBe("Import declaration doesn't contain anything after the \"import\" keyword")
    })
  }

  async test `fails parse if doesnt have whitespace after the import keyword`() {
    let parser = ImportParser()

    let request = ParseRequest(
      parent: FileNode(File("test.flat"))
    )

    let results = Array<ParseResult>():addAll([
      parser.parse(request.copy(sourceCode: "import\"aoeu")),
      parser.parse(request.copy(sourceCode: "importaoeu")),
      parser.parse(request.copy(sourceCode: "importa test"))
    ])

    results.forEachAsync((result) => {
      expect(result).toNotBe(null)
      expect(result.success).toBe(false)
      expect(result.errorMessage).toBe("Import declaration doesn't have whitespace after the \"import\" keyword")
    })
  }
}
