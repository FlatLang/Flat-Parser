package flat/parser

import flat/ast/ArrayAccessNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    CommentParser(),
    DotAccessParser(),
    ColonAccessParser(),
    AssignmentParser(),
    ArrayAccessParser()
  ])

  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => CaptureTokenPattern(
    start: Token(value: "["),
    end: Token(value: "]"),
    label: "index"
  )

  ParserBase[] indexParsers => [
    AnnotationParser(),
    CommentParser(),
    FunctionCallParser(),
    IdentifierParser(),
    ArrayInstantiationParser(),
    LiteralParser()
  ]

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public generateNode(ParseContext context, TokenMatch match) -> ArrayAccessNode {
    return ArrayAccessNode()
  }

  override public getChildParseRequests(ParseContext context, TokenMatch match) -> ParseRequest {
    Token[][] tokens = match
      .getMatch<CaptureTokenMatch>("index")
      .capture

    return ParseRequest(
      requests: tokens.map({
        return ParseRequestData(
          tokens: _,
          parsers: indexParsers
        )
      })
    )
  }
}