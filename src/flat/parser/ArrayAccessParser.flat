package flat/parser

import flat/ast/ArrayAccessNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    DotAccessParser(),
    ColonAccessParser(),
    AssignmentParser(),
    ArrayAccessParser(),
    BinaryOperationParser(),
    UnaryOperationParser(),
    TernaryParser(),
    MatchCaseParser()
  ])

  override lazy TokenPattern pattern => CaptureTokenPattern(
    start: Token(value: "["),
    end: Token(value: "]"),
    label: "index"
  )

  override public checkStatementContinuation(ParseContext context, Token token) => token.type == Token.Type.SYMBOL {
    match token.value {
      "{" => return false
    }
  }

  override public generateNode(ParseContext context, TokenMatch match) -> ArrayAccessNode {
    return ArrayAccessNode()
  }

  override public getChildParseRequests(ParseContext context, TokenMatch match) -> ParseRequest {
    Token[][] tokens = match
      .getMatches<CaptureTokenMatch>("index")
      .map({ _.capture })

    return ParseRequest(
      requests: tokens.map({
        return ParseRequestData(
          tokens: _,
          parsers: [
            AnnotationParser(),
            FunctionCallParser(),
            IdentifierParser(),
            ArrayInstantiationParser(),
            ArrayInitializerParser(),
            LiteralParser(),
            RegexPatternParser()
          ]
        )
      })
    )
  }
}