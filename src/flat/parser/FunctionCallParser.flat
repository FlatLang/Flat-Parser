package flat/parser

import flat/ast/FunctionCallNode
import flat/compiler/models/Token
import flat/compiler/models/SyntaxTokenFunctions

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    DotAccessParser(),
    ColonAccessParser(),
    AssignmentParser(),
    ArrayAccessParser(),
    BinaryOperationParser(),
    UnaryOperationParser(),
    TernaryParser(),
    MatchCaseParser()
  ])

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "name"),
    CaptureTokenPattern(
      label: "generic_arguments",
      start: Token(value: "<"),
      end: Token(value: ">"),
      allowedTokens: [
        Token(type: Token.Type.IDENTIFIER),
        Token(type: Token.Type.SYMBOL, value: "<"),
        Token(type: Token.Type.SYMBOL, value: ">"),
        Token(type: Token.Type.SYMBOL, value: "["),
        Token(type: Token.Type.SYMBOL, value: "]"),
        Token(type: Token.Type.SYMBOL, value: ",")
      ],
      optional: true
    ),
    SingleTokenPattern(Token.Type.SYMBOL, "("),
    GroupTokenPattern([
      NodeTokenPattern(argumentParsers, label: "argument"),
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, ","),
        NodeTokenPattern(argumentParsers, label: "argument")
      ], optional: true, repeat: true)
    ], label: "arguments", optional: true),
    SingleTokenPattern(Token.Type.SYMBOL, ")")
  ])

  ParserBase[] argumentParsers => [
    NamedArgumentParser(),
    AnnotationParser(),
    FunctionCallParser(),
    IdentifierParser(),
    LiteralParser(),
    RegexPatternParser(),
    LambdaParser(),
    ArrayInitializerParser(),
    UnaryOperationParser(),
    CastParser()
  ]

  override public checkStatementContinuation(ParseContext context, Token token) => token.type == Token.Type.SYMBOL {
    match token.value {
      "{" => return false
    }
  }

  override public generateNode(ParseContext context, TokenMatch match) -> FunctionCallNode {
    return FunctionCallNode(
      name: match.getValue("name")
    )
  }

   override public getChildNodeTokenMatches(ParseContext context, TokenMatch match) => NodeTokenMatch[] {
    if (let args = match.getMatch<GroupTokenMatch>("arguments")) {
      return (NodeTokenMatch[])args.tokenMatches.filter({ _.label == "argument" })
    }
  }
}