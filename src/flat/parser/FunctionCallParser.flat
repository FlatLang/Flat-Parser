package flat/parser

import flat/ast/FunctionCallNode
import flat/compiler/models/Token
import flat/compiler/models/SyntaxTokenFunctions

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    DotAccessParser(),
    ColonAccessParser(),
    ArrayAccessParser(),
    BinaryOperationParser(),
    UnaryOperationParser(),
    TernaryParser(),
    MatchCaseParser()
  ])

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "name"),
    CaptureTokenPattern(
      label: "generic_arguments",
      start: Token(value: "<"),
      end: Token(value: ">"),
      optional: true
    ),
    CaptureTokenPattern(
      label: "arguments",
      start: Token(value: "("),
      end: Token(value: ")")
    )
  ])

  override public checkStatementContinuation(ParseContext context, Token token) => token.type == Token.Type.SYMBOL {
    match token.value {
      "{" => return false
    }
  }

  override public generateNode(ParseContext context, TokenMatch match) -> FunctionCallNode {
    return FunctionCallNode(
      name: match.getValue("name")
    )
  }

  override public getChildParseRequests(ParseContext context, TokenMatch match) -> ParseRequest {
    Token[][] tokens = SyntaxTokenFunctions.splitOnTopLevel(
      match.getMatch<CaptureTokenMatch>("arguments").capture,
      Token(type: Token.Type.SYMBOL, value: ",")
    )

    return ParseRequest(
      requests: tokens.map({
        return ParseRequestData(
          tokens: _,
          parsers: [
            NamedArgumentParser(),
            AnnotationParser(),
            FunctionCallParser(),
            IdentifierParser(),
            LiteralParser(),
            RegexPatternParser(),
            LambdaParser(),
            ArrayInitializerParser(),
            UnaryOperationParser()
          ]
        )
      })
    )
  }
}