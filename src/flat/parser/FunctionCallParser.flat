package flat/parser

import flat/ast/FunctionCallNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    CommentParser(),
    DotAccessParser(),
    ColonAccessParser(),
    ArrayAccessParser(),
    BinaryOperationParser(),
    UnaryOperationParser()
  ])

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "name"),
    CaptureTokenPattern(
      label: "generic_arguments",
      start: Token(value: "<"),
      end: Token(value: ">"),
      optional: true
    ),
    CaptureTokenPattern(
      label: "arguments",
      start: Token(value: "("),
      end: Token(value: ")")
    )
  ])

  ParserBase[] argumentParsers => [
    AnnotationParser(),
    CommentParser(),
    FunctionCallParser(),
    IdentifierParser(),
    LiteralParser(),
    LambdaParser()
  ]

  override public checkStatementContinuation(ParseContext context, Token token) => token.type == Token.Type.SYMBOL

  override public generateNode(ParseContext context, TokenMatch match) -> FunctionCallNode {
    return FunctionCallNode(
      name: match.getValue("name")
    )
  }

  override public getChildParseRequests(ParseContext context, TokenMatch match) -> ParseRequest {
    Token[][] tokens = match
      .getMatch<CaptureTokenMatch>("arguments")
      .capture
      .split({ _.value == "," })

    return ParseRequest(
      requests: tokens.map({
        return ParseRequestData(
          tokens: _,
          parsers: argumentParsers
        )
      })
    )
  }
}