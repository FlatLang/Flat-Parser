package flat/parser

import flat/ast/CastNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    IdentifierParser(),
    ArrayInstantiationParser(),
    ArrayInitializerParser(),
    LiteralParser(),
    RegexPatternParser(),
    FunctionCallParser(),
    UnaryOperationParser()
  ])

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.SYMBOL, "("),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "type_name"),
      CaptureTokenPattern(
        label: "generic_parameters",
        start: Token(value: "<"),
        end: Token(value: ">"),
        optional: true
      ),
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, "[", label: "bracket_start"),
        SingleTokenPattern(Token.Type.SYMBOL, "]", label: "bracket_end")
      ], repeat: true, optional: true, label: "array_brackets")
    ], label: "type"),
    SingleTokenPattern(Token.Type.SYMBOL, ")")
  ], label: "cast")

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public generateNode(ParseContext context, TokenMatch match) -> CastNode {
    return CastNode(
      type: match.getValue("type_name"),
      arrayDimensions: match.getMatches("array_brackets").count
    )
  }
}