package flat/parser

import flat/ast/LambdaNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => FunctionScopeParser().childParsers

  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => GroupTokenPattern([
    GroupTokenPattern([
      CaptureTokenPattern(
        label: "parameters",
        start: Token(value: "("),
        end: Token(value: ")")
      ),
      SingleTokenPattern(Token.Type.SYMBOL, value: "=>")
    ], optional: true),
    GroupTokenPattern([ // make this optional (make it an or condition)
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "param_name"),
      SingleTokenPattern(Token.Type.SYMBOL, value: "=>")
    ], optional: true),
    CaptureTokenPattern(
      label: "body",
      start: Token(value: "{"),
      end: Token(value: "}"),
      optional: true
    )
  ])

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public generateNode(ParseContext context, TokenMatch match) -> LambdaNode {
    return LambdaNode()
  }

  override public getChildParseRequests(ParseContext context, TokenMatch match) -> ParseRequest {
    if (let body = match.getMatch<CaptureTokenMatch>("body")) {
      return ParseRequest(
        requests: [
          ParseRequestData(
            tokens: body.capture,
            parsers: FunctionScopeParser().childParsers
          )
        ]
      )
    } else {
      return super.getChildParseRequests(context, match)
    }
  }
}