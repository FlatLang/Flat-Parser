package flat/parser

import flat/parser/matchers
import flat/ast/LambdaNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array()
    :add(LocalScopeParser())
    :addAll(LocalScopeParser().childParsers)

  override lazy TokenPattern pattern => XorTokenPattern([
    GroupTokenPattern([
      XorTokenPattern([
        GroupTokenPattern([
          CaptureTokenPattern(
            label: "parameters",
            start: Token(value: "("),
            end: Token(value: ")")
          ),
          SingleTokenPattern(Token.Type.SYMBOL, value: "=>")
        ]),
        GroupTokenPattern([
          SingleTokenPattern(Token.Type.IDENTIFIER, label: "param_name"),
          SingleTokenPattern(Token.Type.SYMBOL, value: "=>")
        ])
      ]),
      SingleTokenPattern(Token.Type.SYMBOL, value: "{", optional: true)
    ]),
    SingleTokenPattern(Token.Type.SYMBOL, value: "{")
  ])

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public generateNode(ParseContext context, TokenMatch match) -> LambdaNode {
    return LambdaNode()
  }

  override public getChildParseRequests(ParseContext context, TokenMatch match) -> ParseRequest {
    if (let body = match.getMatch<CaptureTokenMatch>("body")) {
      return ParseRequest(
        requests: [
          ParseRequestData(
            tokens: body.capture,
            parsers: Array()
              :addAll(LocalScopeParser().childParsers)
              :addAll([BinaryOperationParser()])
          )
        ]
      )
    } else {
      return super.getChildParseRequests(context, match)
    }
  }
}