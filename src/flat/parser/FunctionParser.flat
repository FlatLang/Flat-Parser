package flat/parser

import flat/ast/FunctionNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
  let static Logger log = Logger(FunctionParser.class)

  override ParserBase[] childParsers => Array():addAll([
    FunctionScopeParser()
  ])

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "name"),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "("),
      GroupTokenPattern([
        NodeTokenPattern([ParameterParser()], label: "parameters"),
        GroupTokenPattern([
          SingleTokenPattern(Token.Type.SYMBOL, ","),
          NodeTokenPattern([ParameterParser()], label: "parameters")
        ], optional: true, repeat: true),
      ], optional: true),
      SingleTokenPattern(Token.Type.SYMBOL, ")")
    ]),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "->"),
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "type"),
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, "[", label: "type_bracket_start"),
        SingleTokenPattern(Token.Type.SYMBOL, "]", label: "type_bracket_end")
      ], repeat: true, optional: true)
    ], optional: true),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.SYMBOL, "=>")
    ], optional: true)
  ])

  ParserBase[] parameterParsers => [ParameterParser()]

  override public generateNode(ParseContext context, TokenMatch match) -> FunctionNode {
    let type = match.getValue("type")
    let name = match.getValue("name")
    let bracketCount = match.getValues("bracket_start").count

    let functionNode = FunctionNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount
    )

    let functionContext = context.copy(
      parentStack: context.parentStack.copy():push(functionNode)
    )

    let parameters = match.getMatches<NodeTokenMatch>("parameters")
      .map(m => m.parser.generateNode(functionContext, m))

    functionNode.children.addAll(parameters)

    return functionNode
  }
}