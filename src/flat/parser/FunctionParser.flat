package flat/parser

import flat/ast/FunctionNode
import flat/compiler/models/Token

class extends ParserBase {
  override let lazy ParserBase[] childParsers => Array():addAll([
    AnnotationParser(),
    CommentParser(),
    FunctionCallParser(),
    AssignmentParser(),
    DotAccessParser(),
    IdentifierParser(),
    LiteralParser()
  ])

  override let lazy TokenMatcher matcher => TokenMatcherGroup([
    TokenMatcher(Token.Type.IDENTIFIER, label: "name"),
    CaptureTokenMatcher(
      label: "parameters",
      start: Token(value: "("),
      end: Token(value: ")")
    ),
    TokenMatcherGroup([
      TokenMatcher(Token.Type.SYMBOL, "->"),
      TokenMatcher(Token.Type.IDENTIFIER, label: "type"),
      TokenMatcherGroup([
        TokenMatcher(Token.Type.SYMBOL, "[", label: "type_bracket_start"),
        TokenMatcher(Token.Type.SYMBOL, "]", label: "type_bracket_end")
      ], repeat: true, optional: true)
    ], optional: true),
    TokenMatcherGroup([
      TokenMatcher(Token.Type.SYMBOL, "=>")
    ], optional: true)
  ])

  lazy ParameterParser parameterParser => ParameterParser()

  override public generateNode(ParseContext context, TokenMatch match) -> FunctionNode {
    let type = match.getValue("type")
    let name = match.getValue("name")
    let bracketCount = match.getValues("bracket_start").count

    let parametersMatch = match.getMatch<CaptureTokenMatch>("parameters")

    let functionNode = FunctionNode(
      type: type,
      name: name,
      arrayDimensions: bracketCount,
      parent: context.parent
    )

    let thisContext = context.copy(
      parent: functionNode
    )

    parametersMatch.capture
      .split({ _.value == "," })
      .map({ parameterParser.matcher.matches(_.toArray()) })
      .map({ parameterParser.generateNode(thisContext, _) })
      .forEach({ functionNode.children.add(_) })

    return functionNode
  }
}