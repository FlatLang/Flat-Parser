package flat/parser

import flat/ast/AnnotationNode
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

class extends ParserBase {
  let lazy ParserBase[] annotationParsers = Array().addAll([
    ModifierParser()
  ])

  override let lazy TokenMatcher matcher => TokenMatcherGroup([
    TokenMatcherGroup([
      TokenMatcher(Token.Type.SYMBOL, "["),
      TokenMatcher(Token.Type.IDENTIFIER, label: "identifier"),
      TokenMatcher(Token.Type.SYMBOL, "]")
    ], optional: true),
    TokenMatcherGroup(annotationParsers.map({ _.matcher }), optional: true)
  ])

  override public generateNode(ParseContext context, TokenMatch match) -> AnnotationNode {
    if (let annotation = annotationParsers.firstNonNull({ _.generateNode(context, match) })) {
      return annotation
    }

    let identifier = match.getValue("identifier")

    return null
  }
}