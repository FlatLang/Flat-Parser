package flat/parser

import flat/ast/AnnotationNode

import flat/extensions/SyntaxStringFunctions

class extends Parser {
  let lazy Parser[] annotationParsers = Array<Parser>().addAll([
    ModifierParser()
  ])

  override public async parse(
    String sourceCode,
    ParseContext context
  ) -> ParseResult {
    let annotations = Array<AnnotationNode>()

    let wordsIterator = sourceCode.splitWhitespace().iterator

    while (wordsIterator.hasNext) {
      let word = wordsIterator.stepNext
      let result = annotationParsers.firstNonNullAsync({
        if ((let x = _.parse(sourceCode, context)) && x.success) {
          return x
        } else {
          return null
        }
      })

      if (result) {

      }
    }

    return ParseResult(annotations)
  }
}