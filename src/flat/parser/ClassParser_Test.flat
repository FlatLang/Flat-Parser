package flat/parser

import flat/datastruct/HashMap
import flat/datastruct/list/Stack
import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/FileScopeNode
import flat/ast/ClassNode
import flat/ast/Node
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can parse declaration`() {
    let parser = ClassParser()

    let match = SingleTokenMatch(
      tokens: [Token(value: "Bob", type: Token.Type.IDENTIFIER)],
      label: "class_name"
    )

    let result = parser.generateNode(null, match)

    let expected = ClassNode(
      name: "Bob",
      implicitName: false
    )

    expect(result).toBe(expected)
  }

  test `inherits name from file name`() {
    let parser = ClassParser()

    let context = ParseContext(
      parentStack: Stack<Node>([FileNode(file: File("test.flat")), FileScopeNode()])
    )

    let match = SingleTokenMatch(tokens: Array())

    let result = parser.generateNode(context, match)

    let expected = ClassNode(
      name: "test",
      implicitName: true
    )

    expect(result).toBe(expected)
  }

  test `can match implicit name with extension`() {
    let matcher = ClassParser().matcher
    let result = matcher.matchAll([
      Token(value: "class", type: Token.Type.IDENTIFIER),
      Token(value: "extends", type: Token.Type.IDENTIFIER),
      Token(value: "Test", type: Token.Type.IDENTIFIER)
    ]).last

    let expected = [
      Token(value: "class", type: Token.Type.IDENTIFIER),
      Token(value: "extends", type: Token.Type.IDENTIFIER),
      Token(value: "Test", type: Token.Type.IDENTIFIER)
    ]

    expect(result?.tokens).toBe(expected)
    expect(matcher.partial).toBe(true)
  }
}
