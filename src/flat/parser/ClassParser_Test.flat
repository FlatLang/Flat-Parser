package flat/parser

import flat/datastruct/HashMap
import flat/datastruct/list/Stack
import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/ClassNode
import flat/compiler/models/Token
import flat/io/File

testable class {
  async test `can parse declaration`() {
    let parser = ClassParser()

    let match = TokenMatch(
      null,
      HashMap():add("class_name", Array():add("Bob"))
    )

    let result = parser.generateNode(null, match)

    let expected = ClassNode(
      name: "Bob",
      implicitName: false
    )

    expect(result).toBe(expected)
  }

  async test `inherits name from file name`() {
    let parser = ClassParser()

    let context = ParseContext(
      parentStack: Stack<Node>([FileNode(file: File("test.flat"))])
    )

    let match = TokenMatch(null, HashMap())

    let result = parser.generateNode(context, match)

    let expected = ClassNode(
      name: "test",
      implicitName: true
    )

    expect(result).toBe(expected)
  }
}
