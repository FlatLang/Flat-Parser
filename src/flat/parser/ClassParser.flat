package flat/parser

import flat/ast/ClassNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    ClassScopeParser()
  ])

  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, "class"),
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "class_name", optional: true),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.IDENTIFIER, "extends"),
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "extends_class_name")
    ], optional: true),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.IDENTIFIER, "implements"),
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "implements_class_name"),
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, ","),
        SingleTokenPattern(Token.Type.IDENTIFIER, label: "implements_class_name")
      ], repeat: true, optional: true)
    ], optional: true)
  ])

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public generateNode(ParseContext context, TokenMatch match) -> ClassNode {
    let className = match.getValue("class_name")
    let extendedClassName = match.getValue("extends_class_name")
    let implementsClassNames = match.getValues("implements_class_name")

    return ClassNode(
      name: className ?: context.fileNode.file.rootName,
      implicitName: className == null
    )
  }
}