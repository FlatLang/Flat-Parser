package flat/parser

import flat/ast/ClassNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    ClassScopeParser()
  ])

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(Token.Type.IDENTIFIER, "class"),
    SingleTokenPattern(Token.Type.IDENTIFIER, label: "class_name", optional: true, greedy: false),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.IDENTIFIER, "extends"),
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "name"),
      CaptureTokenPattern(
        label: "generic_arguments",
        start: Token(value: "<"),
        end: Token(value: ">"),
        skipGenerics: false,
        allowedTokens: [
          Token(type: Token.Type.IDENTIFIER),
          Token(type: Token.Type.SYMBOL, value: "<"),
          Token(type: Token.Type.SYMBOL, value: ">"),
          Token(type: Token.Type.SYMBOL, value: "["),
          Token(type: Token.Type.SYMBOL, value: "]"),
          Token(type: Token.Type.SYMBOL, value: ",")
        ],
        optional: true
      )
    ], optional: true, label: "extends_class"),
    GroupTokenPattern([
      SingleTokenPattern(Token.Type.IDENTIFIER, "implements"),
      SingleTokenPattern(Token.Type.IDENTIFIER, label: "implements_class_name"),
      CaptureTokenPattern(
        label: "generic_arguments",
        start: Token(value: "<"),
        end: Token(value: ">"),
        skipGenerics: false,
        allowedTokens: [
          Token(type: Token.Type.IDENTIFIER),
          Token(type: Token.Type.SYMBOL, value: "<"),
          Token(type: Token.Type.SYMBOL, value: ">"),
          Token(type: Token.Type.SYMBOL, value: "["),
          Token(type: Token.Type.SYMBOL, value: "]"),
          Token(type: Token.Type.SYMBOL, value: ",")
        ],
        optional: true
      ),
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, ","),
        SingleTokenPattern(Token.Type.IDENTIFIER, label: "name"),
        CaptureTokenPattern(
          label: "generic_arguments",
          start: Token(value: "<"),
          end: Token(value: ">"),
          skipGenerics: false,
          allowedTokens: [
            Token(type: Token.Type.IDENTIFIER),
            Token(type: Token.Type.SYMBOL, value: "<"),
            Token(type: Token.Type.SYMBOL, value: ">"),
            Token(type: Token.Type.SYMBOL, value: "["),
            Token(type: Token.Type.SYMBOL, value: "]"),
            Token(type: Token.Type.SYMBOL, value: ",")
          ],
          optional: true
        )
      ], repeat: true, optional: true, label: "implements_class")
    ], optional: true)
  ])

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public generateNode(ParseContext context, TokenMatch match) -> ClassNode {
    let className = match.getValue("class_name")
    let extendedClassName = match.getMatch("extends_class")?.getValue("name")
    let implementsClassNames = match.getMatches("extends_class").map({ _.getValue("name") })

    return ClassNode(
      name: className ?: context.fileNode.file.rootName,
      implicitName: className == null
    )
  }
}