package flat/parser

import flat/ast/ClassNode
import flat/compiler/models/Token

class extends ParserBase {
  override let lazy ParserBase[] childParsers => Array():addAll([
    FieldParser()
  ])

  override let lazy TokenMatcher pattern => TokenMatcherGroup([
    TokenMatcher(Token.Type.IDENTIFIER, "class"),
    TokenMatcher(Token.Type.IDENTIFIER, label: "class_name", optional: true),
    TokenMatcherGroup([
      TokenMatcher(Token.Type.IDENTIFIER, "extends"),
      TokenMatcher(Token.Type.IDENTIFIER, label: "extends_class_name")
    ], optional: true),
    TokenMatcherGroup([
      TokenMatcher(Token.Type.IDENTIFIER, "implements"),
      TokenMatcher(Token.Type.IDENTIFIER, label: "implements_class_name"),
      TokenMatcherGroup([
        TokenMatcher(Token.Type.SYMBOL, ","),
        TokenMatcher(Token.Type.IDENTIFIER, label: "implements_class_name")
      ], repeat: true)
    ], optional: true)
  ])

  override public async generateNode(ParseContext context, TokenMatch match) -> ClassNode {
    let className = match.getValue("class_name")
    let extendedClassName = match.getValue("extends_class_name")
    let implementsClassNames = match.getValues("implements_class_name")

    return ClassNode(
      name: className ?: context.parent.fileNode.file.rootName,
      implicitName: className == null
    )
  }
}