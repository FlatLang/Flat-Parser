package flat/parser

import flat/ast/FunctionNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
  static Logger log = Logger(FunctionExpressionReturnParser.class)

  override lazy TokenPattern pattern => CaptureTokenPattern(
    end: Token(value: "{"),
    minimumTokenCount: 1,
    includeEndToken: false,
    label: "expression_return"
  )

  override public checkStatementContinuation(ParseContext context, Token token) => true

  override public acceptImmediately() => true

  override public generateNode(ParseContext context, TokenMatch match) => null

  override public getChildParseRequests(ParseContext context, TokenMatch match) -> ParseRequest {
    Token[] tokens = match
      .getMatch<CaptureTokenMatch>("expression_return")
      .capture

    return ParseRequest(
      requests: [
        ParseRequestData(
          tokens: tokens,
          parsers: LocalScopeParser().childParsers
        )
      ]
    )
  }
}