package flat/parser

import flat/datastruct/HashMap
import flat/compiler/models/Token

data class {
  visible Token[] tokens
  visible HashMap<String, Array<Object>> values = HashMap()
  visible HashMap<String, Array<TokenMatch>> matches = HashMap()

  public getValue(String label) -> String {
    let obj = values[label]

    if (obj) {
      let String[] array = (Array)obj

      return array.first
    } else {
      return null
    }
  }

  public getValues(String label) -> String[] {
    let obj = values[label]

    if (obj) {
      return (Array)obj
    } else {
      return String[]
    }
  }

  public getMatch<Type extends TokenMatch>(String label) -> Type {
    let obj = matches[label]

    if (obj) {
      let Type[] array = (Array)obj

      return array.first
    } else {
      return null
    }
  }

  public getMatches<Type extends TokenMatch>(String label) -> Type[] {
    let obj = matches[label]

    if (obj) {
      return (Array)obj
    } else {
      return Type[]
    }
  }
}