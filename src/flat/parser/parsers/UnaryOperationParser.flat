package flat/parser/parsers

import flat/parser
import flat/parser/matchers
import flat/ast/IdentifierNode
import flat/ast/FunctionCallNode
import flat/ast/PriorityNode
import flat/ast/UnaryOperationNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
  static Logger log = Logger(UnaryOperationParser.class)

  override ParserBase[] childParsers => Array():addAll([
    IdentifierParser(),
    ArrayInstantiationParser(),
    ArrayInitializerParser(),
    LiteralParser(),
    RegexPatternParser(),
    FunctionCallParser()
  ])

  override lazy TokenPattern pattern => SingleTokenPattern(
    Token.Type.SYMBOL,
    values: [
      "++", "--", "!", "$", "-"
    ]
  )

  override public checkStatementContinuation(ParseContext context, Token token) => true {
    match context.statementParentStack.peek(1).class {
      IdentifierNode.class => return false
      FunctionCallNode.class => return false
      PriorityNode.class => return false
    }
  }

  override public generateNode(ParseContext context, TokenMatch match) -> UnaryOperationNode {
    return UnaryOperationNode(
      operator: match.tokens.first.value
    )
  }
}