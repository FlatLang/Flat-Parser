package flat/parser/parsers

import flat/parser
import flat/parser/matchers
import flat/datastruct/HashMap
import flat/parser/Parser
import flat/ast/FileNode
import flat/ast/PackageNode
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can parse package declaration`() {
    let parser = PackageParser()

    let match = GroupTokenMatch(tokenMatches: [
      SingleTokenMatch(
        tokens: [Token(value: "flat", type: Token.Type.IDENTIFIER)],
        label: "package_location_component"
      ),
      SingleTokenMatch(
        tokens: [Token(value: "/", type: Token.Type.SYMBOL)],
        label: "package_location_component"
      ),
      SingleTokenMatch(
        tokens: [Token(value: "thing", type: Token.Type.IDENTIFIER)],
        label: "package_location_component"
      ),
      SingleTokenMatch(
        tokens: [Token(value: "/", type: Token.Type.SYMBOL)],
        label: "package_location_component"
      ),
      SingleTokenMatch(
        tokens: [Token(value: "test", type: Token.Type.IDENTIFIER)],
        label: "package_location_component"
      )
    ])

    let result = parser.generateNode(null, match)

    let expected = PackageNode(location: "flat/thing/test")

    expect(result).toBe(expected)
  }

  test `can parse single letter package declaration`() {
    let parser = PackageParser()

    let match = GroupTokenMatch(tokenMatches: [
      SingleTokenMatch(
        tokens: [Token(value: "a", type: Token.Type.IDENTIFIER)],
        label: "package_location_component"
      )
    ])

    let result = parser.generateNode(null, match)

    let expected = PackageNode(location: "a")

    expect(result).toBe(expected)
  }
}
