package flat/parser

import flat/ast/IdentifierNode
import flat/compiler/models/Token

class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    DotAccessParser(),
    ColonAccessParser(),
    AssignmentParser()
  ])

  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => GroupTokenPattern([
    TokenPattern(Token.Type.IDENTIFIER, label: "name")
  ])

  override public checkStatementContinuation(ParseContext context, Token token) => token.type == Token.Type.SYMBOL

  override public generateNode(ParseContext context, TokenMatch match) -> IdentifierNode {
    let name = match.getValue("name")

    return IdentifierNode(
      name: name
    )
  }
}