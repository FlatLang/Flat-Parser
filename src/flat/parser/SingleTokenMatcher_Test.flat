package flat/parser

import flat/datastruct/HashMap
import flat/parser/Parser
import flat/annotations/VisibleModifier
import flat/annotations/PublicModifier
import flat/annotations/PrivateModifier
import flat/annotations/LetModifier
import flat/annotations/VarModifier
import flat/ast/FileNode
import flat/ast/PackageNode
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `can match token`() {
    let pattern = SingleTokenPattern(Token.Type.IDENTIFIER, "package")

    let result = pattern
      .getMatcher()
      .match(Token(value: "package", type: Token.Type.IDENTIFIER))

    let expected = [Token(value: "package", type: Token.Type.IDENTIFIER)]

    expect(result?.tokens).toBe(expected)
  }

  test `doesnt match wrong token`() {
    let pattern = SingleTokenPattern(Token.Type.IDENTIFIER, "package")

    let result = pattern
      .getMatcher()
      .match(Token(value: "parckage", type: Token.Type.IDENTIFIER))

    let expected = null

    expect(result).toBe(expected)
  }
}
