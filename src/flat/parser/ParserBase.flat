package flat/parser

import flat/ast/Node
import flat/compiler/models/Token

abstract data class {
  ParserBase[] childParsers => null
  lazy AnnotationParser annotationParser => AnnotationParser()
  lazy TokenPattern pattern => null
  lazy TokenMatcher matcher => null

  public var TokenMatch lastMatch

  public abstract generateNode(ParseContext context, TokenMatch match) -> Node

  public getChildParseRequests(ParseContext context, TokenMatch match) => ParseRequest()

  public checkStatementContinuation(ParseContext context, Token token) => false

  public match(Token token) -> TokenMatch => null {
    if (!matcher) return null

    if (let match = matcher.match(token))  {
      lastMatch = match
      return match
    }
  }

  public reset() {
    lastMatch = null

    if (matcher) {
      matcher.reset()
    }
  }

  override public toString() => "|
    #{this.class.name} {
      \"pattern\": #{pattern},
      \"lastMatch\": #{lastMatch}
    |"
}