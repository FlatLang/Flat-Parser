package flat/parser

import flat/ast/Node
import flat/compiler/models/Token

abstract data class {
  ParserBase[] childParsers => null
  lazy AnnotationParser annotationParser => AnnotationParser()
  lazy TokenPattern pattern => null
  visible lazy TokenMatcher matcher => pattern.getMatcher()

  public var TokenMatch lastMatch

  public abstract generateNode(ParseContext context, TokenMatch match) -> Node

  public getChildParseRequests(ParseContext context, TokenMatch match) => ParseRequest()

  public checkStatementContinuation(ParseContext context, Token token) => false
  public acceptImmediately() => false

  public matchAll(Token[] tokens, ParseContext context = null) -> TokenMatch[] => tokens.map({ this.match(_, context) })

  public match(Token token, ParseContext context = null) -> TokenMatch => null {
    if (!matcher) return null

    if (let match = matcher.match(token, context))  {
      lastMatch = match
      return match
    }
  }

  public reset() {
    lastMatch = null

    if (matcher) {
      matcher.reset()
    }
  }
}