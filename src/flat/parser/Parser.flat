package flat/parser

import flat/ast/Node

abstract class {
  let lazy Parser[] childParsers => Array<Parser>()
  let lazy AnnotationParser annotationParser => AnnotationParser()

  public async parse(ParseRequest request) => ParseResult()

  public async parseChild(
    ParseRequest request
  ) -> ParseResult =>
    childParsers.firstNonNullAsync({
      let annotationsResponse = annotationParser.parse(request)

      let updatedRequest = if (annotationsResponse.success) {
        request.copy(
          sourceCode: annotationsResponse.remainder,
          annotations: annotationsResponse.nodes
        )
      } else {
        request
      }

      if ((let result = _.parse(updatedRequest)) && result.success) {
        result.nodes.forEach({ _.annotations = updatedRequest.annotations })

        return result
      } else {
        return null
      }
    }) ?: ParseResult()
}