package flat/parser

import flat/ast/Node

abstract class {
  let lazy Parser[] childParsers => Array<Parser>()
  let lazy AnnotationParser annotationParser => AnnotationParser()

  public async parse(ParseRequest request) => ParseResult()

  public async parseChild(
    ParseRequest request
  ) => childParsers.firstNonNullAsync({ parseChild(parseAnnotations(request), _) }) ?: ParseResult()

  async parseChild(ParseRequest request, Parser parser) -> ParseResult => null {
    if ((let result = parser.parse(request)) && result.success) {
      return result.copy(
        nodes: result.nodes.map({
          _.copy(annotations: request.annotations)
        })
      )
    }
  }

  async parseAnnotations(ParseRequest request) => request {
    if ((let result = annotationParser.parse(request)) && result.success) {
      return request.copy(
        sourceCode: result.remainder,
        annotations: result.nodes
      )
    }
  }
}