package flat/parser

import flat/datastruct/HashMap
import flat/compiler/models/Token
import flat/log/Logger

data class extends TokenMatcher {
  let static Logger log = Logger(CaptureTokenMatcher.class)

  visible Token start
  visible Token end

  public matches(Token[] tokens, Bool requireAllTokensConsumed = true) -> CaptureTokenMatch => null {
    if (tokens.isEmpty) return null
    if (tokens.first.value != start.value) return null

    var Int depth = 1
    var Int i = 0
    var Bool expectingEnd = false
    var Bool partial = true
    var Token[] capture = tokens.skip(1)

    for (token in capture) {
      match token.value {
        start.value => depth++
        end.value => depth--
      }

      if (depth == 0) {
        partial = false

        if (requireAllTokensConsumed && i != capture.count - 1) {
          return null
        }

        break
      }

      i++
    }

    if (!partial) {
      capture = capture.skipLast(capture.count - i)
    }

    let matchedTokens = tokens.skipLast(tokens.count - capture.count - 2)

    return CaptureTokenMatch(tokens: matchedTokens, capture: capture, partial: partial)
  }
}