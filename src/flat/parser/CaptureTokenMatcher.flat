package flat/parser

import flat/datastruct/HashMap
import flat/compiler/models/Token
import flat/log/Logger

data class extends TokenMatcher {
  let static Logger log = Logger(CaptureTokenMatcher.class)

  CaptureTokenPattern pattern

  override public match(Token token) -> CaptureTokenMatch => null {
    if (disqualified) return null
    if (tokens.isEmpty && pattern.start.value != token.value) {
      disqualified = true
      return null
    }

    tokens.add(token)

    var Int depth = 1
    var Int i = 0
    let capture = tokens.skip(1)

    for (t in capture) {
      match t.value {
        pattern.start.value => depth++
        pattern.end.value => depth--
      }

      if (depth == 0 && i == capture.count - 1) {
        disqualified = true
        valid = true
        complete = true
        return CaptureTokenMatch(
          tokens: tokens.copy(),
          capture: capture.skipLast(1),
          label: pattern.label
        )
      }

      i++
    }
  }
}