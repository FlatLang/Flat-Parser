package flat/parser

import flat/datastruct/HashMap
import flat/compiler/models/Token
import flat/log/Logger

data class {
  let static Logger log = Logger(TokenMatcher.class)

  let lazy Int requiredTokenCount => optional ? 0 : 1

  visible Int tokenType
  visible String value = null
  visible String[] values = null
  visible String label = null
  visible Bool optional = false
  visible Bool repeat = false
  visible Bool greedy = true

  public matches(Token[] tokens, Bool requireAllTokensConsumed = true) -> TokenMatch => null {
    let matches = tokens.takeWhile((t, i) => {
      if (!repeat && i > 0) return false
      if (tokenType != t.type) return false
      if (value && value != t.value) return false
      if (values && values.none({ _ == t.value})) return false

      return true
    })

    if (matches.isNotEmpty) {
      let outputLabels = HashMap<String, Array<String>>()

      if (label) {
        let labelValues = matches.map({ _.value })

        if (labelValues.isNotEmpty) {
          outputLabels.getOrDefault(label, { Array() }).addAll(labelValues)
        }
      }

      return TokenMatch(matches, outputLabels, partial: false)
    }
  }
}