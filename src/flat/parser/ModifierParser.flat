package flat/parser

import flat/annotations/VisibleModifier
import flat/annotations/PublicModifier
import flat/annotations/PrivateModifier
import flat/annotations/LetModifier
import flat/annotations/VarModifier
import flat/annotations/StaticModifier
import flat/annotations/AsyncModifier
import flat/annotations/Modifier
import flat/compiler/models/Token
import flat/ast/AnnotationNode
import flat/ast/Node

import flat/extensions/SyntaxStringFunctions

class extends ParserBase {
  override let lazy TokenMatcher matcher => TokenMatcherGroup([
    TokenMatcher(Token.Type.IDENTIFIER, label: "alias", values: Array()
      :addAll(VisibleModifier.aliases)
      :addAll(PublicModifier.aliases)
      :addAll(PrivateModifier.aliases)
      :addAll(LetModifier.aliases)
      :addAll(VarModifier.aliases)
      :addAll(StaticModifier.aliases)
      :addAll(AsyncModifier.aliases)
    )
  ])

  override public generateNode(ParseContext context, TokenMatch match) -> AnnotationNode {
    let alias = match.getValue("alias")

    if (VisibleModifier.aliases.any({ _ == alias})) {
      return VisibleModifier(aliasUsed: alias)
    }
    if (PublicModifier.aliases.any({ _ == alias})) {
      return PublicModifier(aliasUsed: alias)
    }
    if (PrivateModifier.aliases.any({ _ == alias})) {
      return PrivateModifier(aliasUsed: alias)
    }
    if (LetModifier.aliases.any({ _ == alias})) {
      return LetModifier(aliasUsed: alias)
    }
    if (VarModifier.aliases.any({ _ == alias})) {
      return VarModifier(aliasUsed: alias)
    }
    if (StaticModifier.aliases.any({ _ == alias})) {
      return StaticModifier(aliasUsed: alias)
    }
    if (AsyncModifier.aliases.any({ _ == alias})) {
      return AsyncModifier(aliasUsed: alias)
    }

    return null
  }
}