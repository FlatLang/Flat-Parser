package flat/parser

import flat/annotations/VisibleModifier
import flat/annotations/PublicModifier
import flat/annotations/PrivateModifier
import flat/annotations/LetModifier
import flat/annotations/VarModifier
import flat/annotations/Modifier
import flat/compiler/models/Token
import flat/ast/AnnotationNode
import flat/ast/Node

import flat/extensions/SyntaxStringFunctions

class extends ParserBase {
  override let lazy TokenMatcher pattern => TokenMatcherGroup([
    TokenMatcher(Token.Type.IDENTIFIER, label: "alias")
  ])

  override public async generateNode(ParseContext context, TokenMatch match) -> AnnotationNode {
    let alias = match.getValue("alias")

    if (VisibleModifier.aliases.any({ _ == alias})) {
      return VisibleModifier(aliasUsed: alias)
    }
    if (PublicModifier.aliases.any({ _ == alias})) {
      return PublicModifier(aliasUsed: alias)
    }
    if (PrivateModifier.aliases.any({ _ == alias})) {
      return PrivateModifier(aliasUsed: alias)
    }
    if (LetModifier.aliases.any({ _ == alias})) {
      return LetModifier(aliasUsed: alias)
    }
    if (VarModifier.aliases.any({ _ == alias})) {
      return VarModifier(aliasUsed: alias)
    }

    return null
  }
}