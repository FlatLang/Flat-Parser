package flat/parser/matchers

import flat/parser
import flat/datastruct/HashMap
import flat/parser/Parser
import flat/annotations/VisibleModifier
import flat/annotations/PublicModifier
import flat/annotations/PrivateModifier
import flat/annotations/LetModifier
import flat/annotations/VarModifier
import flat/ast/FileNode
import flat/ast/PackageNode
import flat/compiler/models/Token
import flat/io/File

testable class {
  test `returns tokens on simple successful match on first pattern`() {
    let pattern = XorTokenPattern([
      SingleTokenPattern(Token.Type.IDENTIFIER, "package"),
      SingleTokenPattern(Token.Type.IDENTIFIER, "import")
    ])

    let matcher = pattern.getMatcher()
    let result = matcher.match(Token(value: "package", type: Token.Type.IDENTIFIER))

    expect(result?.tokens).toBe([Token(value: "package", type: Token.Type.IDENTIFIER)])
  }

  test `returns tokens on simple successful match on second pattern`() {
    let pattern = XorTokenPattern([
      SingleTokenPattern(Token.Type.IDENTIFIER, "package"),
      SingleTokenPattern(Token.Type.IDENTIFIER, "import")
    ])

    let matcher = pattern.getMatcher()
    let result = matcher.match(Token(value: "import", type: Token.Type.IDENTIFIER))

    expect(result?.tokens).toBe([Token(value: "import", type: Token.Type.IDENTIFIER)])
  }

  test `returns null on unsuccessful match`() {
    let pattern = XorTokenPattern([
      SingleTokenPattern(Token.Type.IDENTIFIER, "package"),
      SingleTokenPattern(Token.Type.IDENTIFIER, "import")
    ])

    let matcher = pattern.getMatcher()
    let result = matcher.match(Token(value: "bob", type: Token.Type.IDENTIFIER))

    expect(result).toBe(null)
  }

  test `can match on group patterns`() {
    let pattern = XorTokenPattern([
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, label: "declaration_name"),
        SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_name")
      ]),
      GroupTokenPattern([
        GroupTokenPattern([
          SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_type"),
          GroupTokenPattern([
            SingleTokenPattern(Token.Type.SYMBOL, "["),
            SingleTokenPattern(Token.Type.SYMBOL, "]")
          ], repeat: true, greedy: false, optional: true, label: "brackets")
        ], label: "type"),
        SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_name")
      ])
    ])

    let matcher = pattern.getMatcher()
    let result = matcher.matchAll([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ])
  }

  test `can match on complex group patterns`() {
    let pattern = XorTokenPattern([
      GroupTokenPattern([
        SingleTokenPattern(Token.Type.SYMBOL, label: "declaration_name"),
        SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_name")
      ]),
      GroupTokenPattern([
        GroupTokenPattern([
          SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_type"),
          GroupTokenPattern([
            SingleTokenPattern(Token.Type.SYMBOL, "["),
            SingleTokenPattern(Token.Type.SYMBOL, "]")
          ], repeat: true, greedy: false, optional: true, label: "brackets")
        ], greedy: false, label: "type"),
        SingleTokenPattern(Token.Type.IDENTIFIER, label: "declaration_name")
      ])
    ])

    let matcher = pattern.getMatcher()
    let result = matcher.matchAll([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ]).last

    expect(result?.tokens).toBe([
      Token(value: "String", type: Token.Type.IDENTIFIER),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "[", type: Token.Type.SYMBOL),
      Token(value: "]", type: Token.Type.SYMBOL),
      Token(value: "test", type: Token.Type.IDENTIFIER)
    ])
  }
}